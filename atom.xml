<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱工作·爱生活</title>
  
  <subtitle>action456789</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://superkk.top/"/>
  <updated>2019-08-29T09:07:04.749Z</updated>
  <id>http://superkk.top/</id>
  
  <author>
    <name>action456789</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>组件化模块间通信方案</title>
    <link href="http://superkk.top/2018/08/22/%E7%BB%84%E4%BB%B6%E5%8C%96%E6%A8%A1%E5%9D%97%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E6%A1%88/"/>
    <id>http://superkk.top/2018/08/22/组件化模块间通信方案/</id>
    <published>2018-08-21T17:12:20.000Z</published>
    <updated>2019-08-29T09:07:04.749Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件化模块间通信方案"><a href="#组件化模块间通信方案" class="headerlink" title="组件化模块间通信方案"></a>组件化模块间通信方案</h1><h3 id="1、公共模块下沉"><a href="#1、公共模块下沉" class="headerlink" title="1、公共模块下沉"></a>1、公共模块下沉</h3><p>比如一些公共的基础UI组件应该互相独立，并且可以下沉为一个单独的层（比如通用业务层），供其他业务模块调用。</p><h3 id="2、OpenURL统跳协议"><a href="#2、OpenURL统跳协议" class="headerlink" title="2、OpenURL统跳协议"></a>2、<code>OpenURL统跳协议</code></h3><p>用一个url表示一个页面（Controller），或者UI控件，或者任意一个类的对象。</p><p>需要创建一个字典，key是url，value是相应的对象，这个字典由路由类去管理，典型的方案就是<code>MGJRouter</code>。</p><ul><li><p>优点：能解决组件间的依赖，并且方案成熟，有很多知名公司都在用这种方案（蘑菇街）；</p></li><li><p>缺点：编译阶段无法发现潜在bug，并且需要去注册&amp;维护路由表。</p></li></ul><pre><code class="Objective-C">// 注册路由[[Router sharedInstance] registerURL:@&quot;myapp://good/detail&quot; with:^UIViewController *{     return [GoodDetailViewController new];}];// 通过url获取UIViewController *vc = [[Router sharedInstance] openURL:@&quot;myapp://good/detail&quot;]</code></pre><p><a href="https://www.jianshu.com/p/2af9c063fd85" target="_blank" rel="noopener">参考</a></p><h3 id="3、Target-Action-反射"><a href="#3、Target-Action-反射" class="headerlink" title="3、Target-Action(反射)"></a>3、<code>Target-Action</code>(反射)</h3><p>例如从A中push到BViewController，需要在AViewController类文件中import进BViewController，这样二者就会产生耦合<br>现在利用Target-Action机制，我们不再直接import进BViewController，而是利用<code>NSClassFromString(&lt;#NSString * _Nonnull aClassName#&gt;)</code>这个api将BViewController这个字符串反射成BViewController这个类，这样我们就可以根据反射后的类进行实例化，再调用实例化对象的各种方法。</p><ul><li>优点：相比于URL Router，Target-Action也不需要注册和内存占用。</li><li>缺点：编译阶段无法发现潜在的BUG，而且，开发者所创建的类和定义的方法必须要遵守Target-Action的命名规则，调用者可能会因为硬编码问题导致调用失败。</li></ul><p>第三方框架有<code>CTMediator</code>和<code>BeeHive</code>在github</p><h3 id="4、NSNotificationCenter"><a href="#4、NSNotificationCenter" class="headerlink" title="4、NSNotificationCenter"></a>4、<code>NSNotificationCenter</code></h3><ul><li>优点：简单直接。</li><li>缺点：遍地都是通知，如果同事间协调不好会使得代码很混乱。</li></ul><h3 id="5、依赖注入：推荐方法"><a href="#5、依赖注入：推荐方法" class="headerlink" title="5、依赖注入：推荐方法"></a>5、<code>依赖注入</code>：推荐方法</h3><p>比如业务C将自己注入中间层，业务A去中间层去获取依赖的方法和变量。</p><ul><li>实现方式：通过中间层协议实现<br>业务B遵从这个协议，实现协议的代理方法，返回与中间层商量好的一个实际对象。<br>业务A通过中间层的某个方法（与B商量），获取遵从了这个协议的实例B，将其当做一个遵从了这个协议的透明对象来使用。</li><li><p>编程实现：具体运用了java的<code>面向接口编程`</code>Protocol - Class<code>，即iOS的</code>面向协议编程`</p></li><li><p>优点：<br>1、接口类似代码，可以非常灵活的定义函数和回调等。</p></li><li><p>缺点：<br>1、接口定义文件需要放在一个模块以供依赖，但是这个模块不会贡献代码，所以还好。<br>2、使用较为麻烦，每各调用都需要定义一个service，并实现, 对于一些具有普适性规律的场景不太合适，比如页面统一跳转</p></li><li><p>面向接口的调用会产生依赖<br><code>`</code>Objective-C<br>// A 模块</p></li><li>(void)getSomeDataFromB {<br>  B.getSomeData();<br>}</li></ul><p>// B 模块</p><ul><li>(void)getSomeData {<br>  return self.data;<br>}<br><code>`</code></li></ul><ul><li>示例<br><code>ServiceBProtocol</code><pre><code class="Swift">protocol ServiceBProtocol {  func getSomeDataFromServiceB() -&gt; String;}</code></pre></li></ul><p><code>MiddleLayer</code></p><pre><code class="Swift">class MiddleLayer: NSObject {    class func findServiceB() -&gt; ServiceBProtocol {        return ServiceB()    }}</code></pre><p><code>ServiceB</code></p><pre><code class="Swift">// 模块Bclass ServiceB: NSObject {    let serviceB_Data = &quot;ServiceB&quot;}extension ServiceB: ServiceBProtocol {    func getSomeDataFromServiceB() -&gt; String {        return self.serviceB_Data    }}</code></pre><p><code>ServiceA</code></p><pre><code class="Swift">// 模块Aclass ServiceA: NSObject {    func getDataFromB() {        print(MiddleLayer.findServiceB().getSomeDataFromServiceB())    }}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件化模块间通信方案&quot;&gt;&lt;a href=&quot;#组件化模块间通信方案&quot; class=&quot;headerlink&quot; title=&quot;组件化模块间通信方案&quot;&gt;&lt;/a&gt;组件化模块间通信方案&lt;/h1&gt;&lt;h3 id=&quot;1、公共模块下沉&quot;&gt;&lt;a href=&quot;#1、公共模块下沉&quot; cla
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
      <category term="高级" scheme="http://superkk.top/categories/iOS/%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa冷热信号详解</title>
    <link href="http://superkk.top/2018/07/30/ReactiveCocoa%E5%86%B7%E7%83%AD%E4%BF%A1%E5%8F%B7%E8%AF%A6%E8%A7%A3/"/>
    <id>http://superkk.top/2018/07/30/ReactiveCocoa冷热信号详解/</id>
    <published>2018-07-30T12:08:40.000Z</published>
    <updated>2019-08-29T09:07:04.741Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>函数响应式编程(Functional Reactive Programming:FRP)，ReactiveCocoa 版本 2.5</p><h1 id="冷热信号"><a href="#冷热信号" class="headerlink" title="冷热信号"></a>冷热信号</h1><ul><li><p>冷信号<br>只有当你订阅的时候，它才会发布消息，<br>一对一，当有不同的订阅者，消息是重新完整发送。</p></li><li><p>热信号<br>尽管你并没有订阅事件，但是它会时刻推送，类似“直播”，错过了就不再处理。<br>可以有多个订阅者，是一对多</p></li></ul><h1 id="RACSignal-与RACSubject-的区别"><a href="#RACSignal-与RACSubject-的区别" class="headerlink" title="RACSignal 与RACSubject 的区别"></a><code>RACSignal</code> 与<code>RACSubject</code> 的区别</h1><ul><li><code>RACSignal</code>是冷信号</li><li><code>RACSubject</code>是热信号</li></ul><p>如下图</p><ul><li><code>signal</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1120923-cba016d495b9a1b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>subject</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1120923-5974af889c88a7da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>replaySubject</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1120923-282c50256b5bae74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>Subject可以附加行为，例如<code>RACReplaySubject</code>具备为未来订阅者缓冲事件的能力。（这一点与冷信号类似，即使是在数据发送之后才订阅的，依然会收到全部消息）</p></blockquote><h1 id="冷信号示例：延时订阅，依然能收到所有信号数据"><a href="#冷信号示例：延时订阅，依然能收到所有信号数据" class="headerlink" title="冷信号示例：延时订阅，依然能收到所有信号数据"></a>冷信号示例：延时订阅，依然能收到所有信号数据</h1><pre><code>- (void)test1 {    RACSignal *signal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {        [subscriber sendNext:@1];        [subscriber sendNext:@2];        [subscriber sendNext:@3];        [subscriber sendCompleted];        return nil;    }];    NSLog(@&quot;Signal was created.&quot;);    [[RACScheduler mainThreadScheduler] afterDelay:0.1 schedule:^{        [signal subscribeNext:^(id x) {            NSLog(@&quot;Subscriber1 recveive: %@&quot;, x);        }];    }];    [[RACScheduler mainThreadScheduler] afterDelay:1 schedule:^{        [signal subscribeNext:^(id x) {            NSLog(@&quot;Subscriber2 recveive: %@&quot;, x);        }];    }];}</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-419d5730a235a595.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="热信号示例：错过了订阅时机，就收不到信号数据，类似于直播"><a href="#热信号示例：错过了订阅时机，就收不到信号数据，类似于直播" class="headerlink" title="热信号示例：错过了订阅时机，就收不到信号数据，类似于直播"></a>热信号示例：错过了订阅时机，就收不到信号数据，类似于直播</h1><blockquote><p>冷信号会收到全部的数据，即使是在数据发送之后才订阅的</p></blockquote><pre><code>- (void)test2 {    RACMulticastConnection *connection = [[RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {        [[RACScheduler mainThreadScheduler] afterDelay:1 schedule:^{            [subscriber sendNext:@1];        }];        [[RACScheduler mainThreadScheduler] afterDelay:2 schedule:^{            [subscriber sendNext:@2];        }];        [[RACScheduler mainThreadScheduler] afterDelay:3 schedule:^{            [subscriber sendNext:@3];            [subscriber sendCompleted];        }];        return nil;    }] publish];    [connection connect];    NSLog(@&quot;Signal was created.&quot;);    [[RACScheduler mainThreadScheduler] afterDelay:1.1 schedule:^{        [connection.signal subscribeNext:^(id x) {            NSLog(@&quot;Subscriber1 recveive: %@&quot;, x);        }];    }];    [[RACScheduler mainThreadScheduler] afterDelay:2.1 schedule:^{        [connection.signal subscribeNext:^(id x) {            NSLog(@&quot;Subscriber2 recveive: %@&quot;, x);        }];    }];}</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-5e7083e9f1760611.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="SideEffect示例：多次订阅导致信号block多次执行"><a href="#SideEffect示例：多次订阅导致信号block多次执行" class="headerlink" title="SideEffect示例：多次订阅导致信号block多次执行"></a>SideEffect示例：多次订阅导致信号block多次执行</h1><pre><code>- (void)test3 {    // 多次订阅会多次执行    RACSignal *requestSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {        NSLog(@&quot;开始请求网络数据&quot;);        [RACScheduler.mainThreadScheduler afterDelay:1 schedule:^{            [subscriber sendNext:@&quot;1&quot;];        }];        return nil;    }];    // 【请求数据次数 +1】    [requestSignal subscribeNext:^(id x) {        NSLog(@&quot;订阅者1&quot;);    }];    // 【请求数据次数 +1】    [requestSignal subscribeNext:^(NSArray *x) {        NSLog(@&quot;订阅者2&quot;);    }];    // 将信号转换为内容为2的信号    RACSignal *signal1 = [requestSignal flattenMap:^RACStream *(id value) {        return [RACSignal return:@&quot;2&quot;];    }];    // 将signal1信号所有错误信息转换为字符串@&quot;Error&quot;    [signal1 catchTo:[RACSignal return:@&quot;Error&quot;]];    // 在没有获取值之前以字符串@&quot;Loading...&quot;占位    [signal1 startWith:@&quot;Loading...&quot;];    // 将信号进行绑定    // 【请求数据次数 +1】    RAC(self.acountField, text) = signal1;    // 订阅多个信号的任何错误，并且弹出UIAlertView    // 【请求数据次数 +2】    [[RACSignal merge:@[requestSignal, signal1]] subscribeError:^(NSError *error) {        NSLog(@&quot;发生错误&quot;);    }];}</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-465cde44e32e9612.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="解决方式一：使用-RACMulticastConnection把冷信号转化为热信号"><a href="#解决方式一：使用-RACMulticastConnection把冷信号转化为热信号" class="headerlink" title="解决方式一：使用 RACMulticastConnection把冷信号转化为热信号"></a>解决方式一：使用 <code>RACMulticastConnection</code>把冷信号转化为热信号</h2><pre><code>- (void)test4 {    RACSignal *requestSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {        NSLog(@&quot;开始请求网络数据&quot;);        [RACScheduler.mainThreadScheduler afterDelay:1 schedule:^{            [subscriber sendNext:@&quot;1&quot;];            [subscriber sendCompleted];        }];        return nil;    }];    RACMulticastConnection *connection = [requestSignal multicast:[RACSubject subject]];//    RACMulticastConnection *connection = [requestSignal multicast:[RACReplaySubject subject]];    [connection connect];    [connection.signal subscribeNext:^(id x) {        NSLog(@&quot;订阅者1:%@&quot;, x);    }];    [connection.signal subscribeNext:^(NSArray *x) {        NSLog(@&quot;订阅者2:%@&quot;, x);    }];    [RACScheduler.mainThreadScheduler afterDelay:2 schedule:^{        [connection.signal subscribeNext:^(NSArray *x) {            NSLog(@&quot;订阅者3:%@&quot;, x);        }];    }];}</code></pre><h3 id="使用RACSubject时"><a href="#使用RACSubject时" class="headerlink" title="使用RACSubject时"></a>使用<code>RACSubject</code>时</h3><pre><code>RACMulticastConnection *connection = [requestSignal multicast:[RACSubject subject]];</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-85b4314b53586f26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="使用RACReplaySubject时"><a href="#使用RACReplaySubject时" class="headerlink" title="使用RACReplaySubject时"></a>使用<code>RACReplaySubject</code>时</h3><pre><code>RACMulticastConnection *connection = [requestSignal multicast:[RACReplaySubject subject]];</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-4ae4c9e7dbfebe09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="解决方式二：使用-replayLazily把冷信号转化为热信号"><a href="#解决方式二：使用-replayLazily把冷信号转化为热信号" class="headerlink" title="解决方式二：使用 replayLazily把冷信号转化为热信号"></a>解决方式二：使用 <code>replayLazily</code>把冷信号转化为热信号</h2><pre><code>- (void)test5 {    RACSignal *requestSignal = [[RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {        NSLog(@&quot;开始请求网络数据&quot;);        [RACScheduler.mainThreadScheduler afterDelay:1 schedule:^{            [subscriber sendNext:@&quot;1&quot;];            [subscriber sendCompleted];        }];        return nil;    }] replayLazily]; // modify here!!    [requestSignal subscribeNext:^(id x) {        NSLog(@&quot;订阅者1:%@&quot;, x);    }];    [requestSignal subscribeNext:^(NSArray *x) {        NSLog(@&quot;订阅者2:%@&quot;, x);    }];    [RACScheduler.mainThreadScheduler afterDelay:2 schedule:^{        [requestSignal subscribeNext:^(NSArray *x) {            NSLog(@&quot;订阅者3:%@&quot;, x);        }];    }];}</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-437a9f7928924eaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="使用RACCommand把冷信号转化为热信号"><a href="#使用RACCommand把冷信号转化为热信号" class="headerlink" title="使用RACCommand把冷信号转化为热信号"></a>使用<code>RACCommand</code>把冷信号转化为热信号</h2><pre><code>- (void)test6 {    RACCommand *requestCommand = [[RACCommand alloc] initWithSignalBlock:^RACSignal *(id input) {        return [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber) {            NSLog(@&quot;开始请求网络数据&quot;);            [RACScheduler.mainThreadScheduler afterDelay:1 schedule:^{                [subscriber sendNext:@&quot;1&quot;];                [subscriber sendCompleted];            }];            return nil;        }];    }];    RACSignal *requestSignal = [requestCommand execute:nil];    [requestSignal subscribeNext:^(NSArray *x) {        NSLog(@&quot;订阅者1:%@&quot;, x);    }];    [requestSignal subscribeNext:^(NSArray *x) {        NSLog(@&quot;订阅者2:%@&quot;, x);    }];    [RACScheduler.mainThreadScheduler afterDelay:2 schedule:^{        [requestSignal subscribeNext:^(NSArray *x) {            NSLog(@&quot;订阅者3:%@&quot;, x);        }];    }];}</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-e1f4373d8b49a171.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>RACMulticastConnection</code>与<code>RACSubject</code>结合使用时是直播的热信号</p><p><code>RACCommand</code>、<code>replayLazily</code>、<code>RACReplaySubject</code>都是类似于冷信号的情况，不管何时订阅，都会收到所有数据</p><h1 id="ReactiveCocoa中潜在的内存泄漏与解决方案"><a href="#ReactiveCocoa中潜在的内存泄漏与解决方案" class="headerlink" title="ReactiveCocoa中潜在的内存泄漏与解决方案"></a>ReactiveCocoa中潜在的内存泄漏与解决方案</h1><ul><li><p><code>RACObserve</code>中潜在使用了self，要注意循环引用</p></li><li><p><code>RACSubject</code>中如果没有调用<code>sendCompleted</code>，调用map等操作将造成内存泄漏（循环引用）。RACSignal不会有这个问题</p></li></ul><p>代码参见<a href="http://fromwiz.com/share/s/3rEj7C20FAXK2jIwRi1uhc1v0WQKj83L7k142p7dil0ygtoZ" target="_blank" rel="noopener">https://github.com/action456789/ReactiveCocoaDemo</a></p><p>参考：<a href="http://tech.meituan.com/tag/ReactiveCocoa" target="_blank" rel="noopener">http://tech.meituan.com/tag/ReactiveCocoa</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;函数响应式编程(Functional Reactive Programming:FRP)，ReactiveCoco
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
      <category term="Rx &amp; RAC" scheme="http://superkk.top/categories/iOS/Rx-RAC/"/>
    
    
  </entry>
  
  <entry>
    <title>UITableView的`beginUpdates`与`endUpdates`用法详解</title>
    <link href="http://superkk.top/2018/06/05/UITableView%E7%9A%84%60beginUpdates%60%E4%B8%8E%60endUpdates%60%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://superkk.top/2018/06/05/UITableView的`beginUpdates`与`endUpdates`用法详解/</id>
    <published>2018-06-04T18:05:12.000Z</published>
    <updated>2019-08-29T09:07:04.720Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="UITaUITableView的beginUpdates和endUpdates"><a href="#UITaUITableView的beginUpdates和endUpdates" class="headerlink" title="UITaUITableView的beginUpdates和endUpdates"></a>UITaUITableView的<code>beginUpdates</code>和<code>endUpdates</code></h1><ol><li>这个方法用于在调用插入，删除，选择方法时，同时有动画效果。 </li><li>用endUpdate能动画改变行高(触发<code>heightForRowAtIndexPath</code>回调)，而无需relaod这个cell。</li></ol><h2 id="使用场景一：点击cell，cell的高度就变高"><a href="#使用场景一：点击cell，cell的高度就变高" class="headerlink" title="使用场景一：点击cell，cell的高度就变高"></a>使用场景一：点击cell，cell的高度就变高</h2><p>Cell点击方法执行</p><pre><code class="Objective-C">  [tableView beginUpdates];  [tableView endUpdates];</code></pre><p>这两句代码中间没有任何其他部分，但是会触发<code>heightForRowAtIndexPath</code>回调，从而修改cell的高度</p><h2 id="使用场景二：有一个-TableView，现在我希望每按一次-update-按钮，就动态地在下方加两行。"><a href="#使用场景二：有一个-TableView，现在我希望每按一次-update-按钮，就动态地在下方加两行。" class="headerlink" title="使用场景二：有一个 TableView，现在我希望每按一次 update 按钮，就动态地在下方加两行。"></a>使用场景二：有一个 TableView，现在我希望每按一次 update 按钮，就动态地在下方加两行。</h2><ul><li>方法一：简单粗暴的做法 ，更改数据源，然后刷新一下列表</li></ul><pre><code class="Objective-C">// tableData = [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;] @IBAction func update(_ sender: AnyObject) {     tableData.append(&quot;\(tableData.count)&quot;)     tableData.append(&quot;\(tableData.count)&quot;)     tableView.reloadData() }</code></pre><ul><li>方法二</li></ul><pre><code class="Objective-C">// tableData = [&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;]@IBAction func update(_ sender: AnyObject) {    tableData.append(&quot;\(tableData.count)&quot;)    tableData.append(&quot;\(tableData.count)&quot;)    tableView.beginUpdates()    let indexPaths = [IndexPath(row: tableData.count-2, section: 0), IndexPath(row: tableData.count-1, section: 0)]    tableView.insertRows(at: indexPaths, with: UITableViewRowAnimation.automatic)    tableView.endUpdates()}</code></pre><p>这里 beginUpdates 和 endUpdates 方法的作用是，将这两条语句之间的对 tableView 的 insert/delete 操作聚合起来，然后同时更新 UI。</p><h1 id="动态改变tableHeaderView高度"><a href="#动态改变tableHeaderView高度" class="headerlink" title="动态改变tableHeaderView高度"></a>动态改变<code>tableHeaderView</code>高度</h1><p>view 作为 tableView 的 tableHeaderView，单纯的改变 view 的 frame 是无济于事的，tableView 不会时刻适应它的高度，</p><p>所以，如何告诉tableView 它的 tableHeaderView 已经改变了？</p><pre><code class="Objective-C">headerView.frame = newFrame;[self.tableView setTableHeaderView:headerView];</code></pre><p>或者</p><pre><code class="Objective-C">[self.tableView beginUpdates];[self.tableView setTableHeaderView:headerView];[self.tableView endUpdates];</code></pre><h2 id="如何检测动画在UITableView-beginUpdates-endUpdates上结束"><a href="#如何检测动画在UITableView-beginUpdates-endUpdates上结束" class="headerlink" title="如何检测动画在UITableView beginUpdates / endUpdates上结束"></a>如何检测动画在UITableView beginUpdates / endUpdates上结束</h2><pre><code class="Objective-C">[CATransaction begin];[CATransaction setCompletionBlock:^{    // animation has finished}];[tableView beginUpdates];// do some work[tableView endUpdates];[CATransaction commit];</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;UITaUITableView的beginUpdates和endUpdates&quot;&gt;&lt;a href=&quot;#UITaUITableView的beginUpdates和endUpdates&quot; class=&quot;headerlink&quot; title=&quot;U
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>RxSwift入门：基本概念</title>
    <link href="http://superkk.top/2018/05/21/RxSwift%E5%85%A5%E9%97%A8%EF%BC%9A%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://superkk.top/2018/05/21/RxSwift入门：基本概念/</id>
    <published>2018-05-21T10:01:12.000Z</published>
    <updated>2019-08-29T09:07:04.708Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h1><p>Observables是一个事件流的对象</p><h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h2><p>通过empty函数，可以生成一个空的流，在这个流中只会产生一个Completed信息。</p><pre><code class="Swift">let emptyStream: Observable&lt;Int&gt; = Observable.empty()_ = emptyStream.subscribe { event inprint(event)  completed}</code></pre><h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><p>通过never函数产生的流对象，将不会有任何的事件发生。</p><pre><code class="Swift">let neverStream: Observable&lt;Int&gt; = Observable.never()_ = neverStream.subscribe({ _ inprint(&quot;这个方法永远都不会被执行&quot;)})</code></pre><h2 id="just"><a href="#just" class="headerlink" title="just"></a>just</h2><p>just函数调用之后将会产生一个next事件以及一个Completed事件，其中next可以用来传递数据，最后的Completed事件发送之后将不会再有事件了。<br>简单的说：just函数可以发送一个数据。</p><pre><code class="Swift">let justStream = Observable.just(32)_ = justStream.subscribe({ event inprint(event)/*next(32)completed*/})</code></pre><h2 id="of"><a href="#of" class="headerlink" title="of"></a>of</h2><p>将一个集合内的数据所有数据顺序的发送出去。</p><pre><code class="Swift">let ofStream = Observable.of(0, 1, 2)_ = ofStream.subscribe({ event inprint(event)/*next(0)next(1)next(2)completed*/})</code></pre><h2 id="from"><a href="#from" class="headerlink" title="from"></a>from</h2><p>将一个集合对象（比如数组、Range等）转换成流对象，通过订阅可以获得这个集合对象的所有内容。</p><pre><code class="Swift">let streamFromArray = Observable.from([0, 1, 2])_ = streamFromArray.subscribe({ (event) inprint(event)/*next(0)next(1)next(2)completed*/})</code></pre><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><p>create 函数是通过利用闭包来生成流对象的函数</p><pre><code class="Swift">let myJust = { (singleElement: Int) -&gt; Observable &lt;Int&gt; inreturn Observable.create({ (observer) -&gt; Disposable inobserver.onNext(singleElement)observer.onCompleted()return Disposables.create()})}let singleElementStream = myJust(32)_ = singleElementStream.subscribe { (event) inprint(event)/*next(32)completed*/}</code></pre><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>通过error函数将会生成一个终止的流，这个流中只会产生一次error事件并结束掉。</p><pre><code class="Swift">let error = NSError(domain: &quot;com.RxSwiftDemo.kesen&quot;, code: -1, userInfo: nil)let errorStream: Observable&lt;Int&gt; = Observable.error(error)_ = errorStream.subscribe { (event) inprint(event)error(Error Domain=com.RxSwiftDemo.kesen Code=-1 &quot;(null)&quot;)}</code></pre><h2 id="deffered"><a href="#deffered" class="headerlink" title="deffered"></a>deffered</h2><p>deffered函数生成的流对象，只有在添加了订阅者才会被创建。</p><pre><code class="Swift">let defferedStream = Observable.deferred { () -&gt; Observable&lt;Int&gt; inreturn Observable.create({ (observer) -&gt; Disposable inobserver.onNext(0)observer.onNext(1)observer.onCompleted()return Disposables.create()})}_ = defferedStream.subscribe({ (event) inprint(event)/*next(0)next(1)completed*/})</code></pre><h1 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h1><p>Subject其实就是Observer，拥有Observer的所有功能，也可以认为是热的Observer。</p><h2 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h2><p>它仅仅会发送observer订阅之后的事件，也就是说如果sequence上有.Next 的到来，但是这个时候某个observer还没有subscribe它，这个observer就收不到这条信息，它只会收到它订阅之后发生的事件。</p><h2 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h2><p>它和PublishSubject不同之处在于它不会漏消息。即使observer在subscribe的时候已经有事件发生过了，它也会收到之前的事件序列。</p><h2 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h2><p>当有observer在订阅一个BehaviorSubject的时候，它首先将会收到Observable上最近发送一个信号（或者是默认值），接着才会收到Observable上会发送的序列。</p><h2 id="Variable"><a href="#Variable" class="headerlink" title="Variable"></a>Variable</h2><p>Variable是BehaviorSubject的封装，它和BehaviorSubject不同之处在于，不能向Variable发送.Complete和.Error，它会在生命周期结束被释放的时候自动发送.Complete。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Observable&quot;&gt;&lt;a href=&quot;#Observable&quot; class=&quot;headerlink&quot; title=&quot;Observable&quot;&gt;&lt;/a&gt;Observable&lt;/h1&gt;&lt;p&gt;Observables是一个事件流的对象&lt;/p&gt;

      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
      <category term="Rx &amp; RAC" scheme="http://superkk.top/categories/iOS/Rx-RAC/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS11新特性</title>
    <link href="http://superkk.top/2017/12/22/iOS11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://superkk.top/2017/12/22/iOS11新特性/</id>
    <published>2017-12-22T15:02:12.000Z</published>
    <updated>2019-08-29T09:07:04.726Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="iOS11-大标题"><a href="#iOS11-大标题" class="headerlink" title="iOS11 大标题"></a>iOS11 大标题</h1><pre><code>// 导航控制器的`prefersLargeTitles`为大标题的总开关navigationController?.navigationBar.prefersLargeTitles = true// 各个控制器可以自己通过 largeTitleDisplayMode，如果导航控制器的 `prefersLargeTitles` 为 NO，largeTitleDisplayMode 将没有效果navigationItem.largeTitleDisplayMode = .never</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-d28e28449f722b55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="iOS11-导航栏搜索框"><a href="#iOS11-导航栏搜索框" class="headerlink" title="iOS11 导航栏搜索框"></a>iOS11 导航栏搜索框</h1><pre><code>let searchResultsVC = SearchResultTabelViewVC(nibName: nil, bundle: nil)lazy var searchController: UISearchController = {let vc = UISearchController(searchResultsController: searchResultsVC)vc.searchResultsUpdater = self.searchResultsVCvc.hidesNavigationBarDuringPresentation = truevc.dimsBackgroundDuringPresentation = truevc.searchBar.placeholder = &quot;搜索设备&quot;vc.searchBar.enablesReturnKeyAutomatically = falsevc.searchBar.sizeToFit()return vc}()navigationItem.searchController = searchControllernavigationItem.hidesSearchBarWhenScrolling = false</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-d3ea03b58766402f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1120923-de6a6e4434ad40f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="iOS11-Safe-Area-Insets"><a href="#iOS11-Safe-Area-Insets" class="headerlink" title="iOS11 Safe Area Insets"></a>iOS11 Safe Area Insets</h1><pre><code>additionalSafeAreaInsets = UIEdgeInsets(top: 100, left: 0, bottom: 100, right: 100)</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-390517a880546e67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="UITableView-separatorInsetReference"><a href="#UITableView-separatorInsetReference" class="headerlink" title="UITableView separatorInsetReference"></a>UITableView separatorInsetReference</h1><p><img src="https://upload-images.jianshu.io/upload_images/1120923-67de438546b61af5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/1120923-1b6960bbfe07be8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre><code>tableView.estimatedRowHeight = 0tableView.estimatedSectionHeaderHeight = 0tableView.estimatedSectionFooterHeight = 0tableView.separatorInsetReference = .fromAutomaticInsetstableView.separatorInset.left = 60</code></pre><h1 id="UITableViewCell-左划、右划"><a href="#UITableViewCell-左划、右划" class="headerlink" title="UITableViewCell 左划、右划"></a>UITableViewCell 左划、右划</h1><pre><code>// iOS11 UITableViewCell 左划override func tableView(_ tableView: UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -&gt; UISwipeActionsConfiguration? {let action = UIContextualAction(style: .normal, title: &quot;收藏&quot;) { (action, view, completionHandler) in// 执行收藏操作// ...completionHandler(true)}action.image =  imageLiteral(resourceName: &quot;favorite&quot;)action.backgroundColor = UIColor.redlet configuration = UISwipeActionsConfiguration(actions: [action])return configuration}// iOS11 UITableViewCell 右划override func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -&gt; UISwipeActionsConfiguration? {let action = UIContextualAction(style: .destructive, title: &quot;删除&quot;) { (action, view, completionHandler) in// remove item// ...completionHandler(true)}let configuration = UISwipeActionsConfiguration(actions: [action])return configuration}</code></pre><h1 id="代码见"><a href="#代码见" class="headerlink" title="代码见"></a>代码见</h1><p><a href="https://github.com/action456789/iOS11Demo" target="_blank" rel="noopener">https://github.com/action456789/iOS11Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;iOS11-大标题&quot;&gt;&lt;a href=&quot;#iOS11-大标题&quot; class=&quot;headerlink&quot; title=&quot;iOS11 大标题&quot;&gt;&lt;/a&gt;iOS11 大标题&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;// 导航控制器的`prefersLarg
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS SDK 开发</title>
    <link href="http://superkk.top/2017/12/09/iOS-SDK-%E5%BC%80%E5%8F%91/"/>
    <id>http://superkk.top/2017/12/09/iOS-SDK-开发/</id>
    <published>2017-12-09T07:07:25.000Z</published>
    <updated>2019-08-29T09:07:04.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Framework与-a基础"><a href="#一、Framework与-a基础" class="headerlink" title="一、Framework与.a基础"></a>一、Framework与.a基础</h1><p>此处等下一期</p><p><br></p><hr><h1 id="二、工程嵌套联调静态库"><a href="#二、工程嵌套联调静态库" class="headerlink" title="二、工程嵌套联调静态库"></a>二、工程嵌套联调静态库</h1><h2 id="1、新建一个主工程"><a href="#1、新建一个主工程" class="headerlink" title="1、新建一个主工程"></a>1、新建一个主工程</h2><p><br></p><h2 id="2、新建一个Library工程"><a href="#2、新建一个Library工程" class="headerlink" title="2、新建一个Library工程"></a>2、新建一个Library工程</h2><p><br></p><h2 id="3、将静态库工程拖到主工程文件夹下"><a href="#3、将静态库工程拖到主工程文件夹下" class="headerlink" title="3、将静态库工程拖到主工程文件夹下"></a>3、将静态库工程拖到主工程文件夹下</h2><blockquote><p>如果你要拖到其他目录，就要改Library Search Paths<br><img src="https://upload-images.jianshu.io/upload_images/1120923-cce04359a1bbfaad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><br></p></blockquote><h2 id="4、将Library工程下-a文件拖入主工程的Link-Binary-With-Libraries"><a href="#4、将Library工程下-a文件拖入主工程的Link-Binary-With-Libraries" class="headerlink" title="4、将Library工程下.a文件拖入主工程的Link Binary With Libraries"></a>4、将Library工程下.a文件拖入主工程的Link Binary With Libraries</h2><p><img src="https://upload-images.jianshu.io/upload_images/1120923-a5abaa5e64aee935.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>如果有必要（运行时崩溃），将静态库需要加入 Embedded Binaries 中<br><img src="https://upload-images.jianshu.io/upload_images/1120923-a187820d28065970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="5-主工程添加对子工程的依赖，避免每次修改都要手动编译子工程"><a href="#5-主工程添加对子工程的依赖，避免每次修改都要手动编译子工程" class="headerlink" title="5. 主工程添加对子工程的依赖，避免每次修改都要手动编译子工程"></a>5. 主工程添加对子工程的依赖，避免每次修改都要手动编译子工程</h2><p>如下图给主工程添加对子工程的依赖，这样每次编译主工程的时候也会编译子工程。<br><img src="https://upload-images.jianshu.io/upload_images/1120923-014ee57b806790ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><br></p><hr><h1 id="三、在静态库中使用图片以及-xib-等资源文件"><a href="#三、在静态库中使用图片以及-xib-等资源文件" class="headerlink" title="三、在静态库中使用图片以及 xib 等资源文件"></a>三、在静态库中使用图片以及 xib 等资源文件</h1><h2 id="1、添加-Bundle-Target"><a href="#1、添加-Bundle-Target" class="headerlink" title="1、添加 Bundle Target"></a>1、添加 Bundle Target</h2><p><img src="https://upload-images.jianshu.io/upload_images/1120923-0daa863f0f458a55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>因为iOS框架中没有bundle，要选中OS X框架找到bundle，如下图<br><img src="https://upload-images.jianshu.io/upload_images/1120923-271a68244a055813.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></blockquote><h2 id="2、将资源文件加入-bundle-中"><a href="#2、将资源文件加入-bundle-中" class="headerlink" title="2、将资源文件加入 bundle 中"></a>2、将资源文件加入 bundle 中</h2><p>将工程中的资源文件都加入到刚刚建的bundle中，如xib、图片。点+号或直接拖都行。<br><img src="https://upload-images.jianshu.io/upload_images/1120923-54e9d8ebb8086020.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="3、iOS-Deployment-Target改为你支持的最低版本"><a href="#3、iOS-Deployment-Target改为你支持的最低版本" class="headerlink" title="3、iOS Deployment Target改为你支持的最低版本"></a>3、iOS Deployment Target改为你支持的最低版本</h2><p><img src="https://upload-images.jianshu.io/upload_images/1120923-acc55ab1a1c172ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="4、设置base-SDK-为latest-iOS"><a href="#4、设置base-SDK-为latest-iOS" class="headerlink" title="4、设置base SDK 为latest iOS"></a>4、设置base SDK 为latest iOS</h2><p><img src="https://upload-images.jianshu.io/upload_images/1120923-935ccc7c15d9dd90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="5、编译-Bundle"><a href="#5、编译-Bundle" class="headerlink" title="5、编译 Bundle"></a>5、编译 Bundle</h2><p><img src="https://upload-images.jianshu.io/upload_images/1120923-89b0b426acb67a1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="6、主工程添加对子工程的依赖，避免每次修改都要手动编译子工程"><a href="#6、主工程添加对子工程的依赖，避免每次修改都要手动编译子工程" class="headerlink" title="6、主工程添加对子工程的依赖，避免每次修改都要手动编译子工程"></a>6、主工程添加对子工程的依赖，避免每次修改都要手动编译子工程</h2><p><img src="https://upload-images.jianshu.io/upload_images/1120923-5e09392ed9b3954c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="7、加载-Bundle-里的资源文件"><a href="#7、加载-Bundle-里的资源文件" class="headerlink" title="7、加载 Bundle 里的资源文件"></a>7、加载 Bundle 里的资源文件</h2><h3 id="7-1、加载图片"><a href="#7-1、加载图片" class="headerlink" title="7.1、加载图片"></a>7.1、加载图片</h3><p>使用运行时替换 <code>[UIImage imageNamed:]</code>方法，减少修改代码的工作量。<br>相关代码在以下几个类中<br><img src="https://upload-images.jianshu.io/upload_images/1120923-d22158e1d55e1cab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre><code>// 在AppDelegate中执行以下代码即可swizzle 所有 [UIImage imageNamed:]#import &quot;UIImage+Swizzle.h&quot;- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {    [UIImage kk_autoLoadImageInBundle];    return YES;}</code></pre><ul><li>UIImage+Swizzle.m<br><code>`</code><br>//<br>// 修改所有的 [UIImage imageNamed:]的实现，改为先从同一项目中的 .bundle 文件中加载，没有再使用系统默认实现加载</li></ul><ul><li>(void)kk_autoLoadImageInBundle {<br>  SEL original = @selector(imageNamed:);<br>  SEL new = @selector(hook_kk_imageWithName:);<br>  [self kk_swizzleClassMethod:original with:new];<br>}</li></ul><p>// 1. 从 .bundle 中加载图片<br>// 2. 按照默认的方法加载图片</p><ul><li><p>(instancetype)hook_kk_imageWithName:(NSString <em>)imageName {<br>  UIImage </em>image = [NSBundle kk_imageInBundle:kk_BundleName imageName:imageName];<br>  if (!image) {</p><pre><code>  image = [self hook_kk_imageWithName:imageName];</code></pre><p>  }</p><p>  return image;<br>}<br><code>`</code></p></li></ul><ul><li>NSObject+Swizzle.m<br><code>`</code><br>#import “NSObject+Swizzle.h”<br>#import &lt;objc/objc.h&gt;<br>#import &lt;objc/runtime.h&gt;</li></ul><p>@implementation NSObject (Swizzle)</p><ul><li><p>(BOOL)kk_swizzleInstanceMethod:(SEL)originalSel with:(SEL)newSel {<br>  Class class = object_getClass(self);<br>  Method originalMethod = class_getInstanceMethod(class, originalSel);<br>  Method newMethod = class_getInstanceMethod(class, newSel);</p><p>  if (!originalMethod || !newMethod) return NO;<br>  method_exchangeImplementations(originalMethod, newMethod);</p><p>  return YES;<br>}</p></li><li><p>(BOOL)kk_swizzleClassMethod:(SEL)originalSel with:(SEL)newSel {<br>  Class class = object_getClass(self);<br>  Method originalMethod = class_getClassMethod(class, originalSel);<br>  Method newMethod = class_getClassMethod(class, newSel);</p><p>  if (!originalMethod || !newMethod) return NO;<br>  method_exchangeImplementations(originalMethod, newMethod);</p><p>  return YES;<br>}</p></li></ul><p>@end</p><pre><code>### 7.2、加载 `xib`#### 7.2.1 加载xib对应的`UIViewController`需要重写xib对应控制器的 init 方法，否则可能出现找不到xib文件导致crash参考[bundle打包xib文件](http://www.jianshu.com/p/a8c9e52c80de)</code></pre><ul><li><p>(instancetype)init {</p><p>  NSBundle *bundle = [NSBundle kk_bundleWithName:kBundleTargetName];</p><p>  self = [super initWithNibName:@”CalculatePriceViewController” bundle:bundle];</p><p>  return self;</p></li></ul><p>}</p><pre><code>代码参见：[github]([https://github.com/action456789/SKS_Collection/blob/master/SKS_Collection/Classes/Category/Framework开发/NSBundle%2BResource.h)](https://github.com/action456789/SKS_Collection/blob/master/SKS_Collection/Classes/Category/Framework开发/NSBundle%2BResource.h))#### 7.2.1 加载xib对应的`UIVIew`需要重写xib对应View的 init 方法，，否则可能出现找不到xib文件导致crash</code></pre><p>@implementation OfflineView</p><p>//重写要加载的view的init方法</p><ul><li>(instancetype)init {<br>  if (self = [super init]) {<pre><code>  NSBundle *bundle = [NSBundle kk_bundleWithName:kk_BundleName];  self = [[bundle loadNibNamed:@&quot;OfflineView&quot; owner:self options:nil] lastObject];</code></pre>  }<br>  return self;<br>}</li></ul><p>@end</p><pre><code>### 7.3、加载 `Localizable.strings`#### 第一步：在Bundle中新建国际化文件![image.png](https://upload-images.jianshu.io/upload_images/1120923-6f11bf3b8f5d2236.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)#### 第二步：添加语言，并将之前的国际化文件中的代码复制过来![image.png](https://upload-images.jianshu.io/upload_images/1120923-37cc110dd92a5079.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)#### 第三步：使用 NSBundle+Resource 如下方法</code></pre><ul><li>(NSString <em>)mj_localizedStringForKey:(NSString </em>)key;</li><li>(NSString <em>)mj_localizedStringForKey:(NSString </em>)key value:(NSString *)value;<pre><code>然后使用如下宏定义</code></pre>// 加载 Bundle 中的国际化语句<br>#undef NSLocalizedString<br>#define NSLocalizedString(key, comment) \<br>[NSBundle mj_localizedStringForKey:(key)]<br><code>`</code><br>然后就可以自动的加载Bundle中的字符串了</li></ul><p><br></p><hr><h1 id="四、将整个App打包为Framework"><a href="#四、将整个App打包为Framework" class="headerlink" title="四、将整个App打包为Framework"></a>四、将整个App打包为Framework</h1><h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><ol><li>整个项目都要解除 AppDelegate 的依赖，AppDelegate不能打入Framework中</li><li>图片和xib文件需要按照 三 中的处理</li><li>可以使用 runtime 动态加载图片和xib文件，减少工作量</li><li>注意点：bundle中的国际化文件需要重新新建，添加语言，然后将之前App中的内容复制过来，直接拖进去是无效的</li></ol><p><img src="https://upload-images.jianshu.io/upload_images/1120923-57f527356830710e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="实际操作中存在的问题"><a href="#实际操作中存在的问题" class="headerlink" title="实际操作中存在的问题"></a>实际操作中存在的问题</h2><ol><li>图片同时存在@2x和@3x后缀导致加载的图片为nil的问题<br>解决办法为只要@2x的图片</li></ol><p><br></p><hr><h1 id="五、使用-appledoc-生成文档"><a href="#五、使用-appledoc-生成文档" class="headerlink" title="五、使用 appledoc 生成文档"></a>五、使用 <code>appledoc</code> 生成文档</h1><p><a href="https://github.com/tomaz/appledoc" target="_blank" rel="noopener">官网</a></p><ul><li>安装<br><code>brew install appledoc</code></li><li>查看版本<br><code>appledoc --version</code></li><li>查看帮助<br><code>appledoc --help</code></li><li>生成文档<pre><code>appledoc --output ./doc --project-name &quot;D103Framework&quot;  --project-company &quot;RICISUNG&quot; --company-id &quot;RICISUNG&quot; .  </code></pre>”.“ 和前面的符号一定要加 空格 否则就会报错。<br><img src="https://upload-images.jianshu.io/upload_images/1120923-dbc07ae1c94010da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><h1 id="iOS-工程套子工程，主工程和framework工程或-a-library静态库工程联调-http-www-cnblogs-com-zhanglinfeng-p-5494762-html"><a href="#iOS-工程套子工程，主工程和framework工程或-a-library静态库工程联调-http-www-cnblogs-com-zhanglinfeng-p-5494762-html" class="headerlink" title="iOS 工程套子工程，主工程和framework工程或.a library静态库工程联调](http://www.cnblogs.com/zhanglinfeng/p/5494762.html))"></a><a href="[http://www.cnblogs.com/zhanglinfeng/p/5494762.html"><a href="http://www.cnblogs.com/zhanglinfeng/p/5494762.html" target="_blank" rel="noopener">iOS 工程套子工程，主工程和framework工程或.a library静态库工程联调</a></a>](<a href="http://www.cnblogs.com/zhanglinfeng/p/5494762.html)" target="_blank" rel="noopener">http://www.cnblogs.com/zhanglinfeng/p/5494762.html)</a>)</h1><h1 id="iOS-framework静态库中使用xib和图片资源详解"><a href="#iOS-framework静态库中使用xib和图片资源详解" class="headerlink" title="iOS framework静态库中使用xib和图片资源详解"></a><a href="http://www.cnblogs.com/zhanglinfeng/p/5510717.html" target="_blank" rel="noopener"><a href="http://www.cnblogs.com/zhanglinfeng/p/5510717.html" target="_blank" rel="noopener">iOS framework静态库中使用xib和图片资源详解</a></a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、Framework与-a基础&quot;&gt;&lt;a href=&quot;#一、Framework与-a基础&quot; class=&quot;headerlink&quot; title=&quot;一、Framework与.a基础&quot;&gt;&lt;/a&gt;一、Framework与.a基础&lt;/h1&gt;&lt;p&gt;此处等下一期&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
      <category term="高级" scheme="http://superkk.top/categories/iOS/%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>git命令大全</title>
    <link href="http://superkk.top/2017/09/09/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://superkk.top/2017/09/09/git命令大全/</id>
    <published>2017-09-09T13:09:46.000Z</published>
    <updated>2019-08-29T09:02:37.954Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC] </p><p>#基本概念</p><ul><li><code>master</code>指针：指向最新的提交</li></ul><hr><h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="http://sfault-image.b0.upaiyun.com/37/92/37923f2478edc5709b36562b26c9e008" target="_blank" rel="noopener">http://sfault-image.b0.upaiyun.com/37/92/37923f2478edc5709b36562b26c9e008</a></p><hr><p>#全局配置<br><code>$ git config --global user.name &quot;kk&quot;</code><br><code>$ git config --global user.email &quot;superkesen@gmail.com&quot;</code></p><ul><li><p>编辑模式查看全局设置：<br><code>git config --global -e</code></p></li><li><p>列表形式查看全局设置：<br><code>git config --global -l</code></p></li></ul><hr><h1 id="使用GitHub时，在本地创建SSH-Key"><a href="#使用GitHub时，在本地创建SSH-Key" class="headerlink" title="使用GitHub时，在本地创建SSH Key"></a>使用GitHub时，在本地创建SSH Key</h1><p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></p><ul><li><p>如果一切顺利的话，可以在用户主目录里（~/.ssh）找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</p></li><li><p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：<br>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容</p></li></ul><hr><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ul><li>克隆远程仓库到本地<br><code>git clone git@github.com:michaelliao/gitskills.git</code></li><li><p>克隆远程仓库某个分支到本地<br><code>git clone -b &lt;branch&gt; &lt;remote_repo&gt;</code><br>例如： <code>git clone -b 指定的分支名字</code></p></li><li><p>给本地仓库指定远程仓库</p></li></ul><ol><li><p>关联GitHub仓库：<br><code>git remote add origin git@github.com:michaelliao/learngit.git</code></p></li><li><p>显示远程仓库：<br><code>git remote show origin</code><br>第一次推送使用：<br><code>git push -u origin 分支名称</code><br>之后推送使用：<br><code>git push origin maste</code></p></li><li><p>查看远程仓库地址<br><code>git remote -v</code></p></li><li><p>取消关联远程仓库<br><code>git remote rm origin</code></p></li></ol><hr><h1 id="初始化git仓库"><a href="#初始化git仓库" class="headerlink" title="初始化git仓库"></a>初始化git仓库</h1><p><code>git init</code><br><code>git add .</code><br><code>git commit -m “xxxx&quot;</code></p><hr><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>删除所有文件<br><code>git rm * -r</code><br>删除文件夹<br><code>git rm filename -r</code><br>忽略无需版本控制的文档<br><code>echo “*.txt” &gt; .gitignore</code></p><hr><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>查看commit日志<br><code>git reflog</code><br>或<br><code>git log</code></p><hr><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><ul><li>查看当前所在分支<br><code>git branch -a</code></li><li>切换到某个分支<br><code>git checkout 分支名字</code></li></ul><hr><ul><li>创建本地分支并切换到创建的分支：<br><code>git checkout -b your_branch</code></li><li>提交该分支到远程仓库<br><code>git push origin dev</code></li></ul><hr><ul><li>追踪远程分支<br><code>git branch --track release_2.3.0 origin/HEAD:refs/for/release_2.3.0</code></li><li>将本地分支push到远程分支，（远程会自动创建your_branch分支），并关联本地分支与远程分支<br><code>git push -u origin your_branch</code></li><li>删除远程分支<br><code>git push origin --delete &lt;branchName&gt;</code></li><li>删除本地分支<br><code>git branch -d your_branch</code></li></ul><hr><h1 id="本地提交回滚"><a href="#本地提交回滚" class="headerlink" title="本地提交回滚"></a>本地提交回滚</h1><ol><li>先重置本地在上次提交之后的修改（如果需要的话）<br><code>git checkout *.m</code></li><li>重置为远程仓库的最新版本<br>soft表示本地的修改还在本地文件中，不加的话那么本地的修改也没了<br><code>git reset HEAD^ --soft</code></li></ol><hr><h1 id="拉取远程代码时冲突"><a href="#拉取远程代码时冲突" class="headerlink" title="拉取远程代码时冲突"></a>拉取远程代码时冲突</h1><ol><li>保存本地修改到暂存区<br><code>git stash</code></li><li>拉取远程代码<br><code>git pull</code></li><li>将暂存区内容恢复到本地，有冲突时先解决冲突<br><code>git stash pop</code></li></ol><hr><h1 id="git-stash-的使用"><a href="#git-stash-的使用" class="headerlink" title="git stash 的使用"></a>git stash 的使用</h1><ul><li>列出所有暂时保存的工作<br><code>git stash list</code></li><li>恢复某个暂时保存的工作</li></ul><p><code>git stash apply stash@{1}</code></p><ul><li><p>保存stash时设置stash名称<br><code>git stash save &quot;my_stash&quot;</code></p></li><li><p>丢弃最近一次stash的文件<br><code>git stash drop</code></p></li></ul><h1 id="合并某次提交-merge-a-specific-commit-in-Git"><a href="#合并某次提交-merge-a-specific-commit-in-Git" class="headerlink" title="合并某次提交 merge a specific commit in Git"></a>合并某次提交 merge a specific commit in Git</h1><p><code>git cherry-pick d42c389f</code></p><hr><h1 id="git-merge-后-push-到-Gerrit-失败，提示-no-new-changes"><a href="#git-merge-后-push-到-Gerrit-失败，提示-no-new-changes" class="headerlink" title="git merge 后 push 到 Gerrit 失败，提示 no new changes"></a>git merge 后 push 到 Gerrit 失败，提示 no new changes</h1><ul><li>在 <code>git merge</code> 的时候，加上 <code>--no-ff</code> 参数，是为了让它生成一个新的 commit，这样就可以提交了~（不过生成的 gerrit change 是看不到改动信息的）</li></ul><h1 id="tag-操作"><a href="#tag-操作" class="headerlink" title="tag 操作"></a>tag 操作</h1><ul><li>查看tag<br><code>git tag</code></li><li>创建 本地 tag<br><code>git tag 1.0.0</code><br>或者<br><code>git tag -m &quot;first release&quot; 0.1.0</code></li><li>推送 本地 tag 到远程服务器<br><code>git push origin 1.0.0</code></li><li>或者推送所有tags到远程服务器<br><code>git push --tags</code> </li><li>删除本地 tag<br><code>git tag -d 1.0.0</code></li><li>删除远程 tag</li></ul><ol><li>先删除本地 tag<br><code>git tag -d 1.0.0</code></li><li>然后push<br><code>git push origin --delete tag 1.0.0</code><h1 id="fatal-remote-origin-already-exists-错误解决"><a href="#fatal-remote-origin-already-exists-错误解决" class="headerlink" title="fatal: remote origin already exists.错误解决"></a><code>fatal: remote origin already exists.</code>错误解决</h1></li><li>先删除远程 Git 仓库</li></ol><p><code>git remote rm origin</code><br>2 再添加远程 Git 仓库</p><p><code>git remote add origin git@github.com:FBing/Java-code-generator</code></p><h1 id="git-ignore"><a href="#git-ignore" class="headerlink" title="git ignore"></a>git ignore</h1><ul><li>创建<code>.gitignore文件</code><br><code>touch .gitignore</code><br>忽略规则示例<pre><code># 这是注释行，将被忽略*.a       # 忽略所有以.a为扩展名的文件    !lib.a    # 但是名为lib.a的文件或目录不要忽略，即使前面设置了对*.a的忽略/TODO     # 只忽略此目录下的TODO文件，子目录中的TODO文件不忽略build/    # 忽略所有build目录下的文件，但如果是名为build的文件则不忽略doc/*.txt # 忽略文件如doc/notes.txt，但是文件如doc/server/arch.txt不忽略</code></pre>例如忽略下图的GPUImage.framework框架<pre><code>SystemVedio/GPUImage/GPUImage.framework</code></pre><img src="https://upload-images.jianshu.io/upload_images/1120923-8af29923ea45d7fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6218590.png"></li></ul><p>只追踪某几个文件</p><pre><code>#忽略所有文件，注意放在开头/*#除src文件夹外!/src#除bin文件夹外!/bin #总的效果就是git只跟踪src和bin两个文件夹</code></pre><h1 id="merge-与-rebase-的区别"><a href="#merge-与-rebase-的区别" class="headerlink" title="merge 与 rebase 的区别"></a>merge 与 rebase 的区别</h1><blockquote><p>作者：王靖轩<br>链接：<a href="https://www.zhihu.com/question/36509119/answer/131513261" target="_blank" rel="noopener">https://www.zhihu.com/question/36509119/answer/131513261</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p>搞清楚这个问题首先要搞清楚merge和rebase背后的含义。</p><h2 id="merge：会产生一次合并提交"><a href="#merge：会产生一次合并提交" class="headerlink" title="merge：会产生一次合并提交"></a>merge：会产生一次合并提交</h2><p>先看merge，官方文档给的说明是：<br>git-merge - Join two or more development histories together</p><p>顾名思义，当你想要两个分支交汇的时候应该使用merge。<br>根据官方文档给的例子，是master merge topic，如图：<br>A—B—C topic<br>/         \<br>D—E—F—G—H master<br>然而在实践中，在H这个commit上的merge经常会出现merge conflict。为了避免解决冲突的时候引入一些不必要的问题，工程中一般都会规定no conflict merge。比如你在github上发pull request，如果有conflict就会禁止merge。</p><p>所以才会有题主问的问题：在当前的topic分支，想要引入master分支的F、G commit上的内容以避免merge conflict，方便最终合并到master。</p><p>这种情况下用merge当然是一个选项。用merge代表了topic分支与master分支交汇，并解决了所有合并冲突。然而merge的缺点是引入了一次不必要的history join。如图：<br>A–B–C-X topic<br>/       / \<br>D—E—F—G—H master<br>其实仔细想一下就会发现，在引入master分支的F、G commit这个问题上，我们并没有要求两个分支必须进行交汇(join)，我们只是想避免最终的merge conflict而已。</p><h2 id="rebase：将其他分支的内容整合到当前分支，改变当前分支branch-out的位置"><a href="#rebase：将其他分支的内容整合到当前分支，改变当前分支branch-out的位置" class="headerlink" title="rebase：将其他分支的内容整合到当前分支，改变当前分支branch out的位置"></a>rebase：将其他分支的内容整合到当前分支，改变当前分支branch out的位置</h2><p>rebase是另一个选项。rebase的含义是改变当前分支branch out的位置。这个时候进行rebase其实意味着，将topic分支branch out的位置从E改为G，如图：<br>A—B—C topic<br>/<br>D—E—F—G master<br>在这个过程中会解决引入F、G导致的冲突，同时没有多余的history join。但是rebase的缺点是，改变了当前分支branch out的节点。如果这个信息对你很重要的话，那么rebase应该不是你想要的。rebase过程中也会有多次解决同一个地方的冲突的问题，不过可以用squash之类的选项解决。个人并不认为这个是rebase的主要问题。</p><p>综上，其实选用merge还是rebase取决于你到底是以什么意图来避免merge conflict。实践上个人还是偏爱rebase。一个是因为branch out节点不能改变的情况实在太少。另外就是频繁从master merge导致的冗余的history join会提高所有人的认知成本。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC] &lt;/p&gt;
&lt;p&gt;#基本概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;master&lt;/code&gt;指针：指向最新的提交&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;资料&quot;&gt;&lt;a href=&quot;#资料&quot; class=&quot;headerlink&quot; title=&quot;资料&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="git" scheme="http://superkk.top/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac安装MQTT服务器</title>
    <link href="http://superkk.top/2017/03/03/Mac%E5%AE%89%E8%A3%85MQTT%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://superkk.top/2017/03/03/Mac安装MQTT服务器/</id>
    <published>2017-03-03T07:08:59.000Z</published>
    <updated>2019-08-29T09:07:04.722Z</updated>
    
    <content type="html"><![CDATA[<h1 id="emqttd-windows版安装"><a href="#emqttd-windows版安装" class="headerlink" title="emqttd windows版安装"></a>emqttd windows版安装</h1><p>具体以官方文档为主</p><ol><li>下载<a href="http://emqtt.io/docs/v2/install.html#installing-on-windows" target="_blank" rel="noopener">http://emqtt.io/docs/v2/install.html#installing-on-windows</a></li><li>进入下载后的bin目录下<br><code>cd C:\Users\kk\Desktop\emqttd\bin\</code><br>然后执行<br><code>emqttd console</code></li><li>进入Web管理控制台(Dashboard)<br>控制台地址: <a href="http://127.0.0.1:18083" target="_blank" rel="noopener">http://127.0.0.1:18083</a><br>默认用户: admin，密码：public</li></ol><a id="more"></a><h1 id="或者使用-mosquitto"><a href="#或者使用-mosquitto" class="headerlink" title="或者使用 mosquitto"></a>或者使用 mosquitto</h1><ol><li>安装<br><code>brew install mosquitto</code></li><li>配置服务器<br>进入目录<code>/usr/local/Cellar/mosquitto</code> 进入响应版本下目录，我这里是<code>1.4.11_2</code><br>找到<code>/etc/mosquitto/mosquitto.conf</code>文件，修改<code>mosquitto.conf</code>可以对服务器进行配置</li><li>启动服务器<br>进入sbin目录：<br><code>/usr/local/Cellar/mosquitto/1.4.11_2/sbin</code><br>然后执行：<br><code>./mosquitto -c /usr/local/Cellar/mosquitto/1.4.11_2/etc/mosquitto/mosquitto.conf -d</code></li></ol><p>参考：<a href="http://blog.csdn.net/pz0605/article/details/51970568" target="_blank" rel="noopener">http://blog.csdn.net/pz0605/article/details/51970568</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;emqttd-windows版安装&quot;&gt;&lt;a href=&quot;#emqttd-windows版安装&quot; class=&quot;headerlink&quot; title=&quot;emqttd windows版安装&quot;&gt;&lt;/a&gt;emqttd windows版安装&lt;/h1&gt;&lt;p&gt;具体以官方文档为主&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载&lt;a href=&quot;http://emqtt.io/docs/v2/install.html#installing-on-windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://emqtt.io/docs/v2/install.html#installing-on-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;进入下载后的bin目录下&lt;br&gt;&lt;code&gt;cd C:\Users\kk\Desktop\emqttd\bin\&lt;/code&gt;&lt;br&gt;然后执行&lt;br&gt;&lt;code&gt;emqttd console&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入Web管理控制台(Dashboard)&lt;br&gt;控制台地址: &lt;a href=&quot;http://127.0.0.1:18083&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://127.0.0.1:18083&lt;/a&gt;&lt;br&gt;默认用户: admin，密码：public&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Autolayout高级</title>
    <link href="http://superkk.top/2016/11/09/Autolayout%E9%AB%98%E7%BA%A7/"/>
    <id>http://superkk.top/2016/11/09/Autolayout高级/</id>
    <published>2016-11-09T12:23:21.000Z</published>
    <updated>2019-08-29T09:02:37.964Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="intrinsicContentSize"><a href="#intrinsicContentSize" class="headerlink" title="intrinsicContentSize"></a>intrinsicContentSize</h1><p><code>Intrinsic Content Size</code>：固有大小。意思就是说我知道自己的大小，如果你没有为我指定大小，我就按照这个大小来。</p><p>比如：大家都知道在使用 AutoLayout 的时候，<code>UILabel</code> 就不用指定尺寸大小，只需指定位置即可，就是因为，只要确定了文字内容，字体等信息，它自己就能计算出大小来。</p><blockquote><p><code>UILabel</code>，<code>UIImageView</code>，<code>UIButton</code> 等组件及某些包含它们的系统组件都有 Intrinsic Content Size 属性。</p></blockquote><h1 id="Content-Hugging-约束（不想变大约束）"><a href="#Content-Hugging-约束（不想变大约束）" class="headerlink" title="Content Hugging 约束（不想变大约束）"></a><code>Content Hugging</code> 约束（不想变大约束）</h1><p>如果组件的此属性优先级比另一个组件此属性优先级高的话，那么这个组件就保持不变，另一个可以在需要拉伸的时候拉伸。</p><h1 id="Content-Compression-Resistance-约束（不想变小约束）"><a href="#Content-Compression-Resistance-约束（不想变小约束）" class="headerlink" title="Content Compression Resistance 约束（不想变小约束）"></a><code>Content Compression Resistance</code> 约束（不想变小约束）</h1><p>如果组件的此属性优先级比另一个组件此属性优先级高的话，那么这个组件就保持不变，另一个可以在需要压缩的时候压缩。</p><p>例如：</p><p><img src="https://upload-images.jianshu.io/upload_images/1120923-143170678a0a5d2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="Top-Layout-Guide"><a href="#Top-Layout-Guide" class="headerlink" title="Top Layout Guide"></a><code>Top Layout Guide</code></h1><p><code>topLayoutGuide</code>属性表示不希望被透明的状态栏或导航栏遮挡的内容范围的最高位置。这个属性的值是它的length属性的值（topLayoutGuide.length）</p><p>这个值可能由当前的ViewController或这个ViewController所属的NavigationController或TabBarController决定，有如下情况：</p><ol><li>一个独立的ViewController，不包含于任何其他的ViewController。如果状态栏可见，topLayoutGuide表示状态栏的底部，否则表示这个ViewController的上边缘。</li><li>包含于其他ViewController的ViewController不对这个属性起决定作用，而是由容器ViewController决定这个属性的含义：</li></ol><blockquote><ol><li>如果导航栏（Navigation Bar）可见，topLayoutGuide表示导航栏的底部。</li><li>如果状态栏可见，topLayoutGuide表示状态栏的底部。</li><li>如果都不可见，表示ViewController的上边缘。</li></ol></blockquote><p>总之是屏幕上方任何遮挡内容的栏的最底部。</p><h1 id="Safe-Area"><a href="#Safe-Area" class="headerlink" title="Safe Area"></a>Safe Area</h1><p>*作用：取代<code>topLayoutGuide</code>和<code>bottomLayoutGuide</code>**</p><p><code>safeArea</code>是描述你的视图部分不被任何内容遮挡的方法。</p><p><img src="https://upload-images.jianshu.io/upload_images/1120923-4bfd008744e885e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="改变布局的方法"><a href="#改变布局的方法" class="headerlink" title="改变布局的方法"></a>改变布局的方法</h1><h2 id="一、-setNeedsLayout与layoutIfNeeded"><a href="#一、-setNeedsLayout与layoutIfNeeded" class="headerlink" title="一、 setNeedsLayout与layoutIfNeeded"></a>一、 <code>setNeedsLayout</code>与<code>layoutIfNeeded</code></h2><p>更新Autolayout后，如何要立即刷新布局，还要依次调用以下两个方法</p><pre><code>// 立即刷新布局（自己和subview的）self.view.setNeedsLayout()self.view.layoutIfNeeded()</code></pre><p><code>setNeedsLayout</code>给当前 UIView 立一个 flag，以表示后续应该调用 <code>layoutSubviews</code>方法，以调整当前视图及其子视图的布局。</p><p><code>layoutIfNeeded</code>如果有需要刷新的标记，立即调用layoutSubviews进行布局（如果没有标记，不会调用layoutSubviews）</p><h2 id="二、-layoutSubviews"><a href="#二、-layoutSubviews" class="headerlink" title="二、 layoutSubviews"></a>二、 <code>layoutSubviews</code></h2><h3 id="触发时机——Frame改变就会触发，具体如下"><a href="#触发时机——Frame改变就会触发，具体如下" class="headerlink" title="触发时机——Frame改变就会触发，具体如下"></a>触发时机——Frame改变就会触发，具体如下</h3><ol><li><p>初始化不会触发layoutSubviews，但是如果设置了不为CGRectZero的frame的时候就会触发</p></li><li><p>addSubview会触发layoutSubviews</p></li><li><p>设置view的Frame会触发layoutSubviews，当然前提是frame的值设置前后发生了变化</p></li><li><p>滚动一个UIScrollView会触发layoutSubviews</p></li><li><p>旋转Screen会触发父UIView上的layoutSubviews事件</p></li><li><p>改变一个UIView大小的时候也会触发父UIView上的layoutSubviews事件</p></li></ol><h3 id="何时重写-layoutSubviews-方法"><a href="#何时重写-layoutSubviews-方法" class="headerlink" title="何时重写 layoutSubviews 方法"></a>何时重写 <code>layoutSubviews</code> 方法</h3><pre><code>当我们在某个类的内部调整子视图位置时，需要调用；如果你想要在外部设置subviews的位置，就不要重写。</code></pre><h2 id="三、sizeToFit"><a href="#三、sizeToFit" class="headerlink" title="三、sizeToFit"></a>三、<code>sizeToFit</code></h2><p>调用sizeToFit的时候，系统会根据内容的帮我布局一个它认为最合适的大小。</p><p>我们一般在不方便手动布局的时候才调用sizeToFit方法。比如</p><ol><li><p>navigationBar中对navigationItem的设置，（添加两个视图以上的控件到Item）</p></li><li><p>toolBar中的对UIBarButtonItem的设置（一般我们还要添加弹簧控件）</p></li></ol><p>上述两种场合就可以用sizeToFit这个方法，来让系统给我们做自动布局。（注意：如果就添加一个控件的话，我们直接设置fram也是可以的）</p><ol start="3"><li><p>在tabBar中我们不能手动的添加的子控件，因为tabBar是根据控制器系统默认自动添加的tabBarItem。（猜想系统可能也会自动调用了这个方法）</p></li><li><p>UILabel中添加文字，然后让调整label的大小来适应文字，我们也调用sizeToFit的方法。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;intrinsicContentSize&quot;&gt;&lt;a href=&quot;#intrinsicContentSize&quot; class=&quot;headerlink&quot; title=&quot;intrinsicContentSize&quot;&gt;&lt;/a&gt;intrinsicCont
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
      <category term="高级" scheme="http://superkk.top/categories/iOS/%E9%AB%98%E7%BA%A7/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS调试内存泄露</title>
    <link href="http://superkk.top/2016/10/18/iOS%E8%B0%83%E8%AF%95%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>http://superkk.top/2016/10/18/iOS调试内存泄露/</id>
    <published>2016-10-18T15:11:07.000Z</published>
    <updated>2019-08-29T09:07:04.735Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Xcode8使用Memory-Graph"><a href="#Xcode8使用Memory-Graph" class="headerlink" title="Xcode8使用Memory Graph"></a>Xcode8使用Memory Graph</h1><ul><li><p>第一步：真机下运行APP后，点击<br><img src="https://upload-images.jianshu.io/upload_images/1120923-296131fcf6ffee5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>第二步：查看issue面板，注意选择右边Runtime<br><img src="https://upload-images.jianshu.io/upload_images/1120923-8ee8fe78474da0d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>第三步：查看可能出现的内存泄露<br>比如上图的 <code>1 instance of __NSMallocBlock_leaked</code>，点击后出现下图<br><img src="https://upload-images.jianshu.io/upload_images/1120923-7765184c6159e657.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>原因在于如下代码</p><pre><code>group.didSelectedRowBlock = { [unowned self, group] row inguard let indexPaths = group.selectedIndexPaths else {return}if indexPaths.count &gt; 0 {self.shouldAdd = truelet row = (indexPaths.firstObject as! IndexPath).rowself.deviceAttri?.attrValue = String(row)} else {self.shouldAdd = false}}</code></pre><p>group的block中又使用了group，导致了循环引用，虽然使用了[unowned group]，事实证明并没有效果<br>最后的解决办法是修改didSelectedRowBlock的接口，直接将selectedIndexPaths参数传入block参数中:</p><pre><code>group.didSelectedRowBlock = { [unowned self] indexPaths inguard let indexPaths = indexPaths else {return}if indexPaths.count &gt; 0 {self.shouldAdd = trueself.deviceAttri?.attrValue = String(indexPaths.first!.row)} else {self.shouldAdd = false}}</code></pre></li><li>第四步：在 debug 页面查看内存泄露情况<br><img src="https://upload-images.jianshu.io/upload_images/1120923-5d076268da519675.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>有叹号说明需要注意可能存在内存泄露，可以看到 CoreFoundation中也可能存在内存泄露情况</li></ul><h1 id="使用Instruments的Leaks工具"><a href="#使用Instruments的Leaks工具" class="headerlink" title="使用Instruments的Leaks工具"></a>使用Instruments的Leaks工具</h1><h2 id="Time-Profiler"><a href="#Time-Profiler" class="headerlink" title="Time Profiler"></a><code>Time Profiler</code></h2><ul><li>查看多个线程里那些方法费时过多的方法</li><li>Call Tree上会默认按照费时的线程进行排序，单个线程中会也会按照对应的费时方法排序<br><img src="https://upload-images.jianshu.io/upload_images/1120923-b7b30c7aedac7d8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><h2 id="Allocations"><a href="#Allocations" class="headerlink" title="Allocations"></a><code>Allocations</code></h2><ul><li>可以对每个动作的前后进行Generations，对比内存的增加，查看使内存增加的具体的方法和代码所在位置</li><li>具体操作</li></ul><ol><li>在右侧Generation Analysis里点击Mark Generation，这样会产生一个Generation，</li><li>切换到其他页面或一段时间产生了另外一个事件时再点Mark Generation来产生一个新的Generation，</li><li>这样反复，生成多个Generation，查看这几个Generation会看到Growth的大小，如果太大可以点进去查看相应占用较大的线程里右侧Heaviest Stack Trace里查看对应的代码块，然后进行相应的处理。</li></ol><h2 id="Leak"><a href="#Leak" class="headerlink" title="Leak"></a>Leak</h2><p>可以在上面区域的Leaks部分看到对应的时间点产生的溢出，选择后在下面区域的<code>Statistics&gt;Allocation Summary</code>能够看到泄漏的对象，同样可以通过Stack Trace查看到具体对应的代码区域。</p><h1 id="其他调试方法"><a href="#其他调试方法" class="headerlink" title="其他调试方法"></a>其他调试方法</h1><h2 id="勾选Address-Sanitizer可以在运行时看到坏内存访问情况"><a href="#勾选Address-Sanitizer可以在运行时看到坏内存访问情况" class="headerlink" title="勾选Address Sanitizer可以在运行时看到坏内存访问情况"></a>勾选<code>Address Sanitizer</code>可以在运行时看到坏内存访问情况</h2><p><img src="https://upload-images.jianshu.io/upload_images/1120923-a6440da959e589ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Xcode8使用Memory-Graph&quot;&gt;&lt;a href=&quot;#Xcode8使用Memory-Graph&quot; class=&quot;headerlink&quot; title=&quot;Xcode8使用Memory Graph&quot;&gt;&lt;/a&gt;Xcode8使用Memor
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>使用WireShark 调试真机网络</title>
    <link href="http://superkk.top/2016/10/09/%E4%BD%BF%E7%94%A8WireShark-%E8%B0%83%E8%AF%95%E7%9C%9F%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://superkk.top/2016/10/09/使用WireShark-调试真机网络/</id>
    <published>2016-10-09T07:09:37.000Z</published>
    <updated>2019-08-29T09:07:04.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用WireShark-调试真机网络"><a href="#使用WireShark-调试真机网络" class="headerlink" title="使用WireShark 调试真机网络"></a>使用WireShark 调试真机网络</h1><p>需求：调试UIWebView加载缓慢问题</p><ul><li><ol><li>获取iPhone的UDID<br><img src="https://upload-images.jianshu.io/upload_images/1120923-d7d6872480927c6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ol></li><li><p>2：根据获取的 UDID 创建一个虚拟的网卡<br><code>rvictl -s &lt;UDID&gt;</code><br><img src="https://upload-images.jianshu.io/upload_images/1120923-f7f78d28cb94eda6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li></ul><p>通过 <code>ifconfig</code> 可以看到多了一个 <code>rvi0</code>接口<br>通过 <code>rvictl -l</code> 命令可以列出所有挂接的虚拟接口</p><ul><li>3: 在 Wireshark 首页选择 rvi0，使用默认的 Capture Options 即可开始对 iPhone 进行抓包。<br><img src="https://upload-images.jianshu.io/upload_images/1120923-602c6eb7b8e0f13c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><p>其中 iPhone 手机连接 WiFi 动态获取的 IP 地址为 192.168.100.1。</p><blockquote><p>黑色的内容表示遇到错误，需要重点关注<br>关闭wifi，可以抓取移动网络数据包</p></blockquote><p>-4 ： 使用<code>rvictl  -x</code>命令删除虚拟接口, 使用 iPhone 的 UDID 作为参数。</p><h1 id="WireShark-抓包技巧"><a href="#WireShark-抓包技巧" class="headerlink" title="WireShark 抓包技巧"></a>WireShark 抓包技巧</h1><ul><li>第一步：找到请求网址的 IP 地址<br>方法一：用ping命令得到对应的IP地址（可能不对，此时要用方法二）<br><img src="https://upload-images.jianshu.io/upload_images/1120923-4ff29746a38a13a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ul><p>方法二：使用DNS包来确定IP地址</p><blockquote><p>注意手机上 DNS 解析的结果并不总是和电脑上的解析结果一致。这种情况下我们可以通过查看 DNS 数据包来确定<br>DNS 是基于 UDP 的协议，不会有 TCP 重传</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1120923-368232f0c1e87923.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><p>第二步：过滤 IP 地址<br><img src="https://upload-images.jianshu.io/upload_images/1120923-78b3a639da943708.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li><li><p>第三步：确定端口号<br><img src="https://upload-images.jianshu.io/upload_images/1120923-730d2741f957db51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></li></ul><p>注意红框中的 <strong>SourcePort</strong>，这是客户端端口。我们知道 HTTP 支持并发请求，不同的并发请求肯定是占用不同的端口。所以在图中看到的上下两个数据包，并非一定是请求与响应的关系，他们可能属于两个不同的端口，彼此之间毫无关系，只是恰好在时间上最接近而已。</p><blockquote><p>如果只想显示某个端口的数据，可以使用:</p></blockquote><p><code>ip.addr == 220.194.203.68 and tcp.dstport == 52914</code></p><blockquote><p>如果只想看 HTTP 协议的 GET 请求与响应，可以使用 </p></blockquote><p><code></code>ip.addr == 220.194.203.68 and (http.request.method == “GET” || http.response.code == 200)<code></code>来过滤。</p><blockquote><p>如果想看丢包方面的数据，可以用 </p></blockquote><p><code>ip.addr == 220.194.203.68 and (tcp.analysis.fast_retransmission || tcp.analysis.retransmission)</code></p><p><code># 参考</code></p><p><a href="http://ios.jobbole.com/93159/" target="_blank" rel="noopener">http://ios.jobbole.com/93159/</a></p><p><a href="http://blog.csdn.net/phunxm/article/details/38590561" target="_blank" rel="noopener">http://blog.csdn.net/phunxm/article/details/38590561</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用WireShark-调试真机网络&quot;&gt;&lt;a href=&quot;#使用WireShark-调试真机网络&quot; class=&quot;headerlink&quot; title=&quot;使用WireShark 调试真机网络&quot;&gt;&lt;/a&gt;使用WireShark 调试真机网络&lt;/h1&gt;&lt;p&gt;需求：调试U
      
    
    </summary>
    
      <category term="工具" scheme="http://superkk.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>《Effective Objective-C 2.0》读书笔记</title>
    <link href="http://superkk.top/2016/08/12/%E3%80%8AEffective-Objective-C-2-0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://superkk.top/2016/08/12/《Effective-Objective-C-2-0》读书笔记/</id>
    <published>2016-08-12T15:05:51.000Z</published>
    <updated>2019-08-29T09:07:04.747Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="多用类型常量，少用-define"><a href="#多用类型常量，少用-define" class="headerlink" title="多用类型常量，少用 #define"></a>多用类型常量，少用 #define</h1><ol><li>对于局部常量(.m文件中)，</li></ol><ul><li>使用 static 声明表明变量只在本文件中可见，所以无需前缀</li><li>同时使用 static const 关键字与#define 效果相同，好处在于带有类型信息。<pre><code class="Objective-C">static const CGFloat kTopViewHeight = 40;</code></pre></li></ul><ol start="2"><li>对于全局常量</li></ol><ul><li>由于全局使用，使用类名做前缀</li><li>在 .h  文件中使用 extern 声明<pre><code class="Objective-C">extern NSString * const KKSlideTabBarBgColor;</code></pre></li><li>在 .m 文件中定义<pre><code class="Objective-C">NSString * const KKSlideTabBarBgColor = @&quot;name&quot;;</code></pre></li></ul><h1 id="NS-ENUM-与-NS-OPTIONS"><a href="#NS-ENUM-与-NS-OPTIONS" class="headerlink" title="NS_ENUM 与 NS_OPTIONS"></a>NS_ENUM 与 NS_OPTIONS</h1><ul><li>使用 <code>NS_ENUM</code> 和 <code>NS_OPTIONS</code> 可以指定底层数据类型，而且可以保证系统兼容</li><li>当多种状态可以互相组合时，使用 <code>NS_OPTIONS</code>，否则使用 <code>NS_ENUM</code></li><li>命名规则：前缀+状态</li></ul><pre><code class="Objective-C">typedef NS_ENUM(NSUInteger, GDFConnectionState) {GDFConnectionStateDisconnected,GDFConnectionStateConnecting,GDFConnectionStateConnected,};GDFConnectionStateDisconnected,GDFConnectionStateConnecting,GDFConnectionStateConnected,};typedef NS_OPTIONS(NSUInteger, GDFDirection) {GDFDirectionUp    = 1 &lt;&lt; 0,GDFDirectionDown  = 1 &lt;&lt; 1,GDFDirectionLeft  = 1 &lt;&lt; 2,GDFDirectionRight = 1 &lt;&lt; 3,};</code></pre><h1 id="消息转发-message-forwarding"><a href="#消息转发-message-forwarding" class="headerlink" title="消息转发 message forwarding"></a>消息转发 message forwarding</h1><p><img src="https://upload-images.jianshu.io/upload_images/1120923-6a0d3c614ab51b8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="e28856e7825cc2b7113288d11b2f1be6.png"></p><h1 id="动态方法解析-resolve-method"><a href="#动态方法解析-resolve-method" class="headerlink" title="动态方法解析 resolve method"></a>动态方法解析 resolve method</h1><ul><li>动态方法解析是消息转发的第一步，在这里处理，效率最高<br><code>@dynamic</code> 属性   使编译器不自动生成实例变量及存储方法<br>调用的方法：<br><code>`</code>Objective-C</li></ul><ul><li>(BOOL)resolveInstanceMethod:(SEL)selector<br><code>`</code></li></ul><p>代码参见：Runtime.md 动态方法解析 resolve method</p><h1 id="方法调配-method-swizzling"><a href="#方法调配-method-swizzling" class="headerlink" title="方法调配 method swizzling"></a>方法调配 method swizzling</h1><ol><li><p>作用1：在运行死交换两个方法的实现</p><pre><code class="Objective-C">// 根据方法名找到方法的实现class_getInstanceMethod(__unsafe_unretained Class cls, SEL name)// 交换两个方法的实现method_exchangeImplementations(Method m1, Method m2)</code></pre></li><li><p>作用2：为既有的方法实现添加新功能——调试黑盒方法，为完全不知道具体实现的方法添加日志功能<br><img src="https://upload-images.jianshu.io/upload_images/1120923-13947b19a51404ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="fed427a97a343ee16f2c5edc37065689.png"></p></li></ol><pre><code class="Objective-C">@implementation NSString (EOC)+ (void)load {Method originalMethod = class_getInstanceMethod([NSString class],@selector(lowercaseString));Method swappedMethod = class_getInstanceMethod([NSString class],@selector(eoc_myLowercaseString));method_exchangeImplementations(originalMethod, swappedMethod);}- (NSString *)eoc_myLowercaseString {NSString *lowercase = [self eoc_myLowercaseString];NSLog(@&quot;%@ =&gt; %@&quot;, self, lowercase);return lowercase;}</code></pre><h1 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h1><pre><code class="Objective-C">// 对象结构体// isa 指针指向类对象struct objc_object {Class isa;};// 类结构体// 1. 这个结构存放类的元数据，实例中的方法，变量等信息就存储在类对象中// 2. isa 指针指向元类(metaclass)，元类描述类对象本身所具有的元数据，类方法就存储在元类中// 3. 每个类只有一个类对象，每个类对象只有一个元类typedef struct objc_class *Class;struct objc_class {Class isa;Class super_class;const char *name;long version;long info;long instance_size;struct objc_ivar_list *ivars;struct objc_method_list **methodLists;struct objc_cache *cache;struct objc_protocol_list *protocols;};</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-9a23d372be25f7a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="f81c1ab1af0d8cee47e96db2568859d0.png"></p><h1 id="前缀"><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h1><ol><li>苹果保留了两字符前缀，我们应该使用三字符前缀</li><li>C函数名应该加上前缀</li><li>头文件中的全局变量需要加上前缀</li><li>为私有方法名添加前缀（例如p_），用于区分哪些方法是私有的，哪些是公有的，私有方法可以随意改动，公有方法则要三思而后行。</li><li>为第三方类添加分类时，分类中的方法要增加前缀，可以避免覆盖原有方法。</li></ol><h1 id="使用段位缓存代理能否响应某个方法"><a href="#使用段位缓存代理能否响应某个方法" class="headerlink" title="使用段位缓存代理能否响应某个方法"></a>使用段位缓存代理能否响应某个方法</h1><ul><li>段位：结构体可以设置其成员所占的二进制位数<pre><code class="Objective-C">struct {unsigned int fieldA : 8; // fieldA 占 8 个二进制位，即 0 ~ 255unsigned int fieldB : 4;unsigned int fieldC : 2;unsigned int fieldD : 1;}_delegateFlag;</code></pre></li><li>实例：<br><code>`</code>Objective-C<br>@protocol KKSlideTabBarViewDelegate <nsobject><br>@optional;</nsobject></li><li>(void)slideTabBarView:(KKSlideTabBarView *)tabBar pageChangedFromIndex:(NSUInteger)from toIndex:(NSUInteger)to;</li><li>(void)slideTabBarView:(KKSlideTabBarView <em>)tabBar itemMoreClicked:(UIButton </em>)itemMore;<br>@end<br>@interface KKSlideTabBarView : UIView<br>@property (nonatomic,weak) id <kkslidetabbarviewdelegate> delegate;<br>@end<br><code></code>Objective-C<br>@implementation KKSlideTabBarView {<br>struct {<br>unsigned int didPageChangedHandle    : 1;<br>unsigned int didItemMoreClickdHandle : 1;<br>}_delegateFlags;<br>}</kkslidetabbarviewdelegate></li><li>(void)setDelegate:(id<kkslidetabbarviewdelegate>)delegate {<br>_delegate = delegate;<br>_delegateFlags.didPageChangedHandle = [self.delegate respondsToSelector:@selector(slideTabBarView:pageChangedFromIndex:toIndex:)];<br>_delegateFlags.didItemMoreClickdHandle = [self.delegate respondsToSelector:@selector(itemMoreClicked:)];</kkslidetabbarviewdelegate></li></ul><p>}</p><pre><code>```Objective-C- (void)itemMoreClicked:(UIButton *)sender{if (_delegateFlags.didItemMoreClickdHandle) {[self.delegate slideTabBarView:self itemMoreClicked:sender];}}}</code></pre><h1 id="NSOperation-与-GCD-优缺点"><a href="#NSOperation-与-GCD-优缺点" class="headerlink" title="NSOperation 与  GCD 优缺点"></a>NSOperation 与  GCD 优缺点</h1><ul><li>GCD 优点：纯 C api，更加轻量级。而operation 是对象，更加重量级</li><li>NSOperation 优点：</li></ul><ol><li>操作加入队列后可以取消（已经启动的任务无法取消）</li><li>可以自动操作之间的依赖关系</li><li>可以使用 KVO 监控 NSOperation 对象的属性，比如通过 isCancelled 判断任务是否取消， isFinished 属性判断任务是否完成</li><li>可以指定每个操作的优先级，而 GCD 只能指定队列的优先级</li><li>可以自定义 operation 对象</li></ol><h1 id="使用-NSCache-和-NSPurgeableData-缓存数据"><a href="#使用-NSCache-和-NSPurgeableData-缓存数据" class="headerlink" title="使用 NSCache 和 NSPurgeableData 缓存数据"></a>使用 NSCache 和 NSPurgeableData 缓存数据</h1><ul><li>只有费时操作才值得放入缓存，比如需要从网络获取的数据、从磁盘读取的数据<br><code>`</code>Objective-C<br>@interface KKSlideTabBarViewController ()<br>{<br>NSCache *_cache;<br>}<br>@end</li></ul><p>_cache = [NSCache new];<br>_cache.countLimit = 100;<br>_cache.totalCostLimit = 5 <em> 1024 </em> 1024;</p><p>NSPurgeableData *cacheData = [_cacheobjectForKey:@”url…”];<br>if (cacheData) {<br>// stop the data being purged<br>[cacheData beginContentAccess];</p><p>// 使用数据<br>// ……</p><p>// Mark that the data may be purged again<br>[cacheData endContentAccess];<br>} else {<br>NSData <em>data = [NSData dataWithContentsOfURL:@”xxx”];<br>NSPurgeableData </em>purgeableData = [NSPurgeableData dataWithData:data];<br>[_cache setObject:purgeableData<br>forKey:@”url…”<br>cost:data.length];</p><p>// With access already maked</p><p>// user data<br>// …..</p><p>// Mark that the data may be purged now<br>[purgeableData endContentAccess];<br>}</p><pre><code># 精简 + load 与 + initialize 方法它们都是在类载入系统时由运行时系统调用，不能手动调用。`+ load` 方法:在类加载时调用。系统会先调用父类的 load 再调用子类的 load，先调用类本身 load，再调用 categery load。在 load 方法中，运行时系统处于脆弱状态，不能确定其他类是否加载完毕。不能在 load 方法中使用其他类对象，因为无法知道这个类是否加载了。`+ initialize` 方法`+ initialize` 方法是惰性加载，使用到类时才会调用。`+ initialize` 方法调用时，系统处于正常状态，可以在 + initialize 方法中使用其他类对象。`+ initialize` 方法一定会在线程安全的环境中执行，那么执行 + initialize 方法时会阻塞其他线程如果子类没有实现 + initialize 方法，而父类实现了，那么会调用夫类的。所以应该这么实现：```Objective-C+ (void)initialize{if (self == [KKSlideTabBarView class]) {// 只有当 KKSlideTabBarView 类载入系统时才执行这里的代码// 不然的话 KKSlideTabBarView 的父类载入系统也会调用 initialize}}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;多用类型常量，少用-define&quot;&gt;&lt;a href=&quot;#多用类型常量，少用-define&quot; class=&quot;headerlink&quot; title=&quot;多用类型常量，少用 #define&quot;&gt;&lt;/a&gt;多用类型常量，少用 #define&lt;/h1&gt;&lt;o
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>GCD用法全解</title>
    <link href="http://superkk.top/2016/08/02/GCD%E7%94%A8%E6%B3%95%E5%85%A8%E8%A7%A3/"/>
    <id>http://superkk.top/2016/08/02/GCD用法全解/</id>
    <published>2016-08-02T09:16:17.000Z</published>
    <updated>2019-08-29T09:07:04.724Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="dispatch-time与dispatch-walltime的区别"><a href="#dispatch-time与dispatch-walltime的区别" class="headerlink" title="dispatch_time与dispatch_walltime的区别"></a><code>dispatch_time</code>与<code>dispatch_walltime</code>的区别</h1><p>所有定时器dispatch source都是间隔定时器，一旦创建，会按你指定的间隔定期递送事件。<br>当计算机睡眠时，定时器dispatch source会被挂起，稍后系统唤醒时，定时器dispatch source也会自动唤醒。<br>定时器dispatch source会使用系统默认时钟来确定何时触发，但是默认时钟在计算机睡眠时不会继续。</p><p>如果你使用 dispatch_walltime 函数来设置定时器dispatch source，则定时器会根据挂钟时间来跟踪，<br>这种定时器比较适合触发间隔相对比较大的场合，可以防止定时器触发间隔出现太大的误差。</p><p>区别：</p><ol><li><p><code>dispatch_time_t</code>类型的时间我们可以通过<code>dispatch_time</code>来创建，也可以通过<code>dispatch_walltime</code>来创建。<br><code>dispatch_time</code>创建的时间多以第一个参数为参照物，之后过多久执行任务。<br><code>dispatch_walltime</code>多用于创建绝对时间，如某年某月某日某时某分执行某任务，比如闹钟的设置。</p></li><li><p><code>dispatch_time</code>在计算机睡眠时会停止<br><code>dispatch_walltime</code>不会</p></li></ol><p>例如以下情景</p><p>情景：希望一小时后执行任务，5分钟后计算机进入睡眠<br>操作：50分钟后唤醒计算机<br>实际：使用<code>dispatch_walltime</code>时: 5分钟后开始执行<br>使用<code>dispatch_time</code>: 55分钟后开始执行</p><h1 id="GCD-定时器的使用"><a href="#GCD-定时器的使用" class="headerlink" title="GCD 定时器的使用"></a>GCD 定时器的使用</h1><h2 id="dispatch-source-set-timer-最后一个参数-leeway-详解"><a href="#dispatch-source-set-timer-最后一个参数-leeway-详解" class="headerlink" title="dispatch_source_set_timer 最后一个参数 leeway 详解"></a><code>dispatch_source_set_timer</code> 最后一个参数 <code>leeway</code> 详解</h2><ul><li><code>leeway</code> 这个参数告诉系统我们需要计时器触发的精准程度。所有的计时器都不会保证100%精准，这个参数用来告诉系统你希望系统保证精准的努力程度。如果你希望一个计时器没五秒触发一次，并且越准越好，那么你传递0为参数。</li><li>如果是一个周期性任务，比如检查email，那么你会希望每十分钟检查一次，但是不用那么精准。所以你可以传入60，告诉系统60秒的误差是可接受的。  </li><li>这样有什么意义呢？——降低资源消耗。如果系统可以让cpu休息足够长的时间，并在每次醒来的时候执行一个任务集合，而不是不断的醒来睡去以执行任务，那么系统会更高效。如果传入一个比较大的leeway给你的计时器，意味着你允许系统拖延你的计时器来将计时器任务与其他任务联合起来一起执行。</li></ul><pre><code class="Objective-C">    dispatch_queue_t mainQueue = dispatch_get_main_queue();    NSTimeInterval interval = 1.0f;    NSTimeInterval delay = 1.0f;    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, mainQueue);    dispatch_source_set_timer(timer, dispatch_time(DISPATCH_TIME_NOW, delay), interval * NSEC_PER_SEC, 1.0 * NSEC_PER_SEC);    dispatch_source_set_event_handler(timer, ^{        NSLog(@&quot;%s&quot;, __func__);    });    dispatch_resume(timer);    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(6 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{        dispatch_source_cancel(timer);    });</code></pre><h2 id="测试代码执行效率"><a href="#测试代码执行效率" class="headerlink" title="测试代码执行效率"></a>测试代码执行效率</h2><pre><code class="Objective-C">func testPerformance(closure: ()-&gt;()) {    let startTime: dispatch_time_t = dispatch_time(DISPATCH_TIME_NOW, 0)    closure()    let endTime: dispatch_time_t = dispatch_time(DISPATCH_TIME_NOW, 0)    print(endTime - startTime)} func testFunctionPerformance(selector: Selector) {    let startTime: dispatch_time_t = dispatch_time(DISPATCH_TIME_NOW, 0)    self.performSelector(selector)    let endTime: dispatch_time_t = dispatch_time(DISPATCH_TIME_NOW, 0)    print(endTime - startTime)}</code></pre><h1 id="GCD-加锁"><a href="#GCD-加锁" class="headerlink" title="GCD 加锁"></a>GCD 加锁</h1><h2 id="GCD-信号量的使用"><a href="#GCD-信号量的使用" class="headerlink" title="GCD 信号量的使用"></a>GCD 信号量的使用</h2><ol><li>设置信号量的个数为1时，可以当锁来使用</li><li>设置信号量的个数与CPU个数相近时（比如CPU个数 * 2），可以用来限制线程个数。</li></ol><pre><code class="Objective-C">var semaphore: dispatch_semaphore_t = dispatch_semaphore_create(1)//MARK: ------------------- 使用信号量进行加锁操作 --------------------func test_semaphore() {    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) { () -&gt; Void in  self.tast_first()    }    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) { () -&gt; Void in  self.tast_second()    }    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) { () -&gt; Void in  self.tast_third()    }} func tast_first() {    // p操作，进入临界区      dispatch_semaphore_wait(self.semaphore, DISPATCH_TIME_FOREVER)    print(&quot;First tast starting&quot;)    sleep(1)    NSLog(&quot;%@&quot;, &quot;First task is done&quot;)    // v操作，离开临界区      dispatch_semaphore_signal(self.semaphore)} func tast_second() {    dispatch_semaphore_wait(self.semaphore, DISPATCH_TIME_FOREVER)    print(&quot;Second tast starting&quot;)    sleep(1)    NSLog(&quot;%@&quot;, &quot;Second task is done&quot;)    dispatch_semaphore_signal(self.semaphore)} func tast_third() {    dispatch_semaphore_wait(self.semaphore, DISPATCH_TIME_FOREVER)    print(&quot;Third tast starting&quot;)    sleep(1)    NSLog(&quot;%@&quot;, &quot;Thrid task is done&quot;)    dispatch_semaphore_signal(self.semaphore)}</code></pre><h1 id="使用信号量控制多线程中代码执行顺序"><a href="#使用信号量控制多线程中代码执行顺序" class="headerlink" title="使用信号量控制多线程中代码执行顺序"></a>使用信号量控制多线程中代码执行顺序</h1><pre><code class="Objective-C">- (void)test_dispatch_semaphore_t_0 {    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{        [self method1];        sleep(10);        dispatch_semaphore_signal(semaphore);    });    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);    [self method2];}</code></pre><h1 id="延时执行"><a href="#延时执行" class="headerlink" title="延时执行"></a>延时执行</h1><pre><code class="Objective-C">//MARK: ------------------- dispatch_after 的使用-------------------- func dispatchAfter() {    let delay: dispatch_time_t = dispatch_time(DISPATCH_TIME_NOW, Int64(5 * Double(NSEC_PER_SEC)))    dispatch_after(delay, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) { () -&gt; Void in  print(&quot;viewDidLoad()&quot;)    }}# GCD 多任务异步执行与 `dispatch_notify` 的使用```Objective-C//MARK: ------------------- 多任务异步执行 与 dispatch_group_notify 的使用 -------------------- func dispatchGroup() {    let group: dispatch_group_t = dispatch_group_create()    let globalQueueDefault: dispatch_queue_t = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)    // 串行队列按照先进先出的顺序执行（FIFO）          let userQueueSerie: dispatch_queue_t = dispatch_queue_create(&quot;com.dispatchGroup.demo&quot;, DISPATCH_QUEUE_SERIAL)    // 下载任务1         dispatch_group_async(group, userQueueSerie){        sleep(3)        NSLog(&quot;Task1 is done&quot;)    }    // 下载任务2         dispatch_group_async(group, userQueueSerie){        sleep(3)        NSLog(&quot;Task2 is done&quot;)    }    // 下载任务3         dispatch_group_async(group, globalQueueDefault){        sleep(3)        NSLog(&quot;Task3 is done&quot;)    }    // 监听任务组事件的执行完毕          dispatch_group_notify(group, dispatch_get_main_queue()){        NSLog(&quot;Group tasks are done&quot;)    }    // 设置等待时间(即设置超时)，在等待时间结束后，如果还没有执行完任务组，则返回。返回0代表执行成功，非0则执行失败          // 等待直到完成          let result = dispatch_group_wait(group, DISPATCH_TIME_FOREVER)    if (result != 0) {        print(&quot;Now viewDidLoad is done&quot;)    }}# dispatch_group_apply```Objective-C//MARK: ------------------- 多任务异步执行/同步执行 与 dispatch_apply 的使用 -------------------- func dispatchApply() {    let iterations: Int = 20 // 迭代次数          let globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)    // 同步执行          self.testPerformance { () -&gt; () in          dispatch_apply(iterations, globalQueue) { (index: Int) -&gt;             Void in  print(index, NSThread.currentThread())        }        NSLog(&quot;iterations is over&quot;)    }    print(&quot;------------------------------------&quot;)    // 异步执行          self.testPerformance { () -&gt; () in          dispatch_apply(iterations, globalQueue, { (index: Int) -&gt; Void in              dispatch_async(globalQueue, { () -&gt; Void in                  print(index, NSThread.currentThread())            })        })        NSLog(&quot;iterations is over&quot;)    }    print(&quot;------------------------------------&quot;)    self.testPerformance { () -&gt; () in          for i:Int in 1...iterations {            print(i, NSThread.currentThread())        }    }}</code></pre><h1 id="dispatch-group-enter-dispatch-group-leave"><a href="#dispatch-group-enter-dispatch-group-leave" class="headerlink" title="dispatch_group_enter / dispatch_group_leave"></a><code>dispatch_group_enter</code> / <code>dispatch_group_leave</code></h1><pre><code class="Objective-C">//MARK: ------------------- dispatch_group_enter / dispatch_group_leave -------------------// 将任务组中的任务未执行完毕的任务数目加减1，这种方式不使用 dispatch_group_async 来提交任务， // 注意：这两个函数要配合使用，有enter要有leave，这样才能保证功能完整实现。    // 串行执行三个任务  func dispatchGroup_EnterAndLeave_Seriel() {    let group = dispatch_group_create()    for index:UInt32 in 1...3{        dispatch_group_enter(group)//提交了一个任务，任务数目加1                manualDownLoad(index){            print(&quot;Task \(index) is done&quot;)            dispatch_group_leave(group)//完成一个任务，任务数目减1 }        }    }     func manualDownLoad(num: UInt32, block:()-&gt;()){        print(&quot;Downloading task &quot;, num)        sleep(num)        block()    }     // 并行执行三个任务      func dispatchGroup_EnterAndLeave_Concurrent() {        let group = dispatch_group_create()//创建group            let globalQueueDefault = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT,0)        for index:UInt32 in 1...3 {            dispatch_group_enter(group)//提交了一个任务，任务数目加1                    manualDownLoad(index, queue: globalQueueDefault){            NSLog(&quot;Task\(index) is done&quot;)            dispatch_group_leave(group)//完成一个任务，任务数目减1 }        }    }     func manualDownLoad(num: UInt32, queue:dispatch_queue_t, block:()-&gt;()){        dispatch_async(queue){            NSLog(&quot;Downloading task\(num)&quot;)            sleep(num)            block()        }    }</code></pre><h1 id="GCD-实战：资源竞争"><a href="#GCD-实战：资源竞争" class="headerlink" title="GCD 实战：资源竞争"></a>GCD 实战：资源竞争</h1><pre><code class="Objective-C">//MARK: ------------------- 多线程测试：资源竞争 -------------------- func test_mutiThread() {        let userSerialQueue = dispatch_queue_create(&quot;com.test.mutiThread.userSerialQueue&quot;, DISPATCH_QUEUE_SERIAL)        let globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)        let group = dispatch_group_create()        // 当 &quot;Processing data&quot;（CUP处理速度） 速度远小于 &quot;Reading file&quot;（磁盘处理速度） 速度时，线程数占用过多          // 使用信号量来限制同时执行的任务的数量                 let cupCount = NSProcessInfo.processInfo().processorCount // CPU 数量        let jobSemaphore = dispatch_semaphore_create(cupCount * 2) // 限制线程个数        for i:Int in 1...50 {            dispatch_semaphore_wait(jobSemaphore, DISPATCH_TIME_FOREVER);            dispatch_group_async(group, userSerialQueue, { () -&gt; Void in  print(&quot;Reading file&quot;, i, NSThread.currentThread())                // sleep(2)                                dispatch_group_async(group, globalQueue, { () -&gt; Void in  print(&quot;  Processing data&quot;, i, NSThread.currentThread())                    sleep(1)                    dispatch_group_async(group, userSerialQueue, { () -&gt; Void in  print(&quot;    writing file&quot;, i, NSThread.currentThread())                        // sleep(2)                                                dispatch_semaphore_signal(jobSemaphore);                    })                })            })        }        dispatch_group_wait(group, DISPATCH_TIME_FOREVER)    }</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.jianshu.com/p/6670cdbb1ebb" target="_blank" rel="noopener">http://www.jianshu.com/p/6670cdbb1ebb</a><br><a href="http://www.dreamingwish.com/article/gcd-practice-io-race.html" target="_blank" rel="noopener">http://www.dreamingwish.com/article/gcd-practice-io-race.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;dispatch-time与dispatch-walltime的区别&quot;&gt;&lt;a href=&quot;#dispatch-time与dispatch-walltime的区别&quot; class=&quot;headerlink&quot; title=&quot;dispatch_ti
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods 管理私有库</title>
    <link href="http://superkk.top/2016/06/09/CocoaPods-%E7%AE%A1%E7%90%86%E7%A7%81%E6%9C%89%E5%BA%93/"/>
    <id>http://superkk.top/2016/06/09/CocoaPods-管理私有库/</id>
    <published>2016-06-09T10:02:18.000Z</published>
    <updated>2019-08-29T09:02:37.961Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="一、创建私有-Cocoapod-Spec-Repo-仓库"><a href="#一、创建私有-Cocoapod-Spec-Repo-仓库" class="headerlink" title="一、创建私有 Cocoapod Spec Repo 仓库"></a>一、创建私有 <code>Cocoapod Spec Repo</code> 仓库</h1><p><code>Spec Repo</code> 是所有 pod 的索引，自己创建的私有 pod 库都将放在这里</p><ol><li>创建一个空的私有 <code>Cocoapod Spec Repo</code> 的远程 git 仓库</li><li>执行命令<br><code>pod repo add KSSpecPods https://coding.net/u/action456789/p/KSSpecPods.git</code></li><li>查看是否创建成功<br>进入到<code>~/.cocoapods/repos</code>目录下，如果看到 <code>KSSpecPods</code> ，说明创建成功</li></ol><h1 id="二、创建需要放入-Cocoapod-Spec-Repo-仓库进行管理的私有库"><a href="#二、创建需要放入-Cocoapod-Spec-Repo-仓库进行管理的私有库" class="headerlink" title="二、创建需要放入 Cocoapod Spec Repo 仓库进行管理的私有库"></a>二、创建需要放入 Cocoapod Spec Repo 仓库进行管理的私有库</h1><h2 id="创建全新的私有库时"><a href="#创建全新的私有库时" class="headerlink" title="创建全新的私有库时"></a>创建全新的私有库时</h2><ol><li><p>创建私有库的远程 git 仓库</p></li><li><p>创建本地私有库<br><code>pod lib create podTestLibrary</code></p></li><li><p>关联本地私有库与远程仓库，并打上版本号，然后推送到远程 git 仓库<br><code>git tag -m &quot;first release&quot; 0.1.0</code><br><code>git push --tags     #推送tag到远端仓库</code></p></li><li><p>编辑<code>podspec</code>文件<br>例如：<br><code>`</code><br>Pod::Spec.new do |s|<br>s.name             = ‘TAFNetwork’<br>s.version          = ‘0.1.0’<br>s.summary          = ‘Just Testing.’</p></li></ol><p>s.description      = &lt;&lt;-DESC<br>Testing Private Podspec.</p><ul><li>Markdown format.</li><li>Don’t worry about the indent, we strip it!<br>DESC</li></ul><p>s.homepage         = ‘<a href="https://github.com/action456789/CocoapodsPrivateLibTest&#39;" target="_blank" rel="noopener">https://github.com/action456789/CocoapodsPrivateLibTest&#39;</a>                           #主页,这里要填写可以访问到的地址，不然验证不通过</p><h1 id="s-screenshots-‘www-example-com-screenshots-1-39-‘www-example-com-screenshots-2-39-截图"><a href="#s-screenshots-‘www-example-com-screenshots-1-39-‘www-example-com-screenshots-2-39-截图" class="headerlink" title="s.screenshots     = ‘www.example.com/screenshots_1&#39;, ‘www.example.com/screenshots_2&#39;      #截图"></a>s.screenshots     = ‘<a href="http://www.example.com/screenshots_1&#39;" target="_blank" rel="noopener">www.example.com/screenshots_1&#39;</a>, ‘<a href="http://www.example.com/screenshots_2&#39;" target="_blank" rel="noopener">www.example.com/screenshots_2&#39;</a>      #截图</h1><p>s.license          = ‘MIT’                                                                  #开源协议<br>s.author           = { ‘kesen’ =&gt; <a href="mailto:&#39;317331820@qq.com" target="_blank" rel="noopener">&#39;317331820@qq.com</a>‘ }</p><p>s.source           = { :git =&gt; ‘<a href="https://github.com/action456789/CocoapodsPrivateLibTest.git&#39;" target="_blank" rel="noopener">https://github.com/action456789/CocoapodsPrivateLibTest.git&#39;</a>, :tag =&gt; s.version}   #项目地址，这里不支持ssh的地址，验证不通过，只支持HTTP和HTTPS，最好使用HTTPS</p><h1 id="s-social-media-url-‘https-twitter-com-lt-TWITTER-USERNAME-gt-’-多媒体介绍地址"><a href="#s-social-media-url-‘https-twitter-com-lt-TWITTER-USERNAME-gt-’-多媒体介绍地址" class="headerlink" title="s.social_media_url = ‘https://twitter.com/&lt;TWITTER_USERNAME&gt;’                             #多媒体介绍地址"></a>s.social_media_url = ‘<a href="https://twitter.com/" target="_blank" rel="noopener">https://twitter.com/</a>&lt;TWITTER_USERNAME&gt;’                             #多媒体介绍地址</h1><p>s.platform     = :ios, ‘7.0’                  #支持的平台及版本<br>s.requires_arc = true                         #是否使用ARC，如果指定具体文件，则具体的问题使用ARC</p><p>s.source_files = ‘TAFNetwork/Classes/<strong>/*’    #代码源文件地址，</strong>/*表示Classes目录及其子目录下所有文件，</p><h1 id="s-resource-bundles-资源文件地址"><a href="#s-resource-bundles-资源文件地址" class="headerlink" title="s.resource_bundles = {                                      #资源文件地址"></a>s.resource_bundles = {                                      #资源文件地址</h1><h1 id="‘TAFNetwork’-gt-‘TAFNetwork-Assets-png’"><a href="#‘TAFNetwork’-gt-‘TAFNetwork-Assets-png’" class="headerlink" title="‘TAFNetwork’ =&gt; [‘TAFNetwork/Assets/*.png’]"></a>‘TAFNetwork’ =&gt; [‘TAFNetwork/Assets/*.png’]</h1><h1 id=""><a href="#" class="headerlink" title="}"></a>}</h1><p>s.public_header_files = ‘TAFNetwork/Classes/<strong>/*.h’          #NAME_OF_POD/Classes/</strong>/*’，公开头文件地址<br>s.frameworks = ‘UIKit’                                       #所需的framework，多个用逗号隔开</p><h1 id="s-dependency-‘CocoaAsyncSocket’-‘-gt-7-5-0’"><a href="#s-dependency-‘CocoaAsyncSocket’-‘-gt-7-5-0’" class="headerlink" title="s.dependency ‘CocoaAsyncSocket’, ‘~&gt; 7.5.0’"></a>s.dependency ‘CocoaAsyncSocket’, ‘~&gt; 7.5.0’</h1><h1 id="s-dependency-‘FMDB’-‘-gt-2-5’"><a href="#s-dependency-‘FMDB’-‘-gt-2-5’" class="headerlink" title="s.dependency ‘FMDB’, ‘~&gt; 2.5’"></a>s.dependency ‘FMDB’, ‘~&gt; 2.5’</h1><h1 id="s-dependency-‘Reachability’-‘-gt-3-2’"><a href="#s-dependency-‘Reachability’-‘-gt-3-2’" class="headerlink" title="s.dependency ‘Reachability’, ‘~&gt; 3.2’"></a>s.dependency ‘Reachability’, ‘~&gt; 3.2’</h1><h1 id="s-dependency-‘SAMKeychain’-‘-gt-1-5-2’"><a href="#s-dependency-‘SAMKeychain’-‘-gt-1-5-2’" class="headerlink" title="s.dependency ‘SAMKeychain’, ‘~&gt; 1.5.2’"></a>s.dependency ‘SAMKeychain’, ‘~&gt; 1.5.2’</h1><p>end</p><pre><code>5. 验证`podspec`执行 `pod lib lint`## 私有库项目已经存在时1. 创建 `podspec` 文件`pod spec create PodTestLibrary git@coding.net:wtlucky/podTestLibrary.git`2. 验证`podspec`执行 `pod lib lint`# 三、本地测试podspec文件1）新建一个项目，在这个项目的Podfile文件中直接指定刚才创建编辑好的podspec文件，看是否可用。 在Podfile中我们可以这样编辑，有两种方式</code></pre><p>pod ‘podTestLibrary’, :podspec =&gt; ‘/Users/kesen/Desktop/Repository/KSSpecPods/podTestLibrary/podTestLibrary.podspec’  # 指定podspec文件</p><h1 id="pod-‘podTestLibrary’-path-gt-‘-Users-kesen-Desktop-Repository-KSSpecPods’-指定路径"><a href="#pod-‘podTestLibrary’-path-gt-‘-Users-kesen-Desktop-Repository-KSSpecPods’-指定路径" class="headerlink" title="pod ‘podTestLibrary’, :path =&gt; ‘/Users/kesen/Desktop/Repository/KSSpecPods’      # 指定路径"></a>pod ‘podTestLibrary’, :path =&gt; ‘/Users/kesen/Desktop/Repository/KSSpecPods’      # 指定路径</h1><pre><code>2）安装依赖`pod install`# 四、提交私有库到私有 `Cocoapod Spec Repo` 仓库1. 进入私有库目录，执行`pod repo push KSSpecPods podTestLibrary.podspec`2. 进入`/Users/kesen/.cocoapods/KSSpecPods`查看是否提交成功# 五、私有制作好的私有库1）在 podfile 文件中加入代码</code></pre><p>pod ‘PodTestLibrary’, ‘~&gt; 0.1.0’<br><code>`</code><br>2）执行 <code>pod update</code><br>然后打开项目可以看到，我们自己的库文件已经出现在Pods子项目中的Pods子目录下了</p><h1 id="六、更新私有库"><a href="#六、更新私有库" class="headerlink" title="六、更新私有库"></a>六、更新私有库</h1><p>参考<br><a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/" target="_blank" rel="noopener">http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;一、创建私有-Cocoapod-Spec-Repo-仓库&quot;&gt;&lt;a href=&quot;#一、创建私有-Cocoapod-Spec-Repo-仓库&quot; class=&quot;headerlink&quot; title=&quot;一、创建私有 Cocoapod Spec Re
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
      <category term="cocoapods" scheme="http://superkk.top/categories/iOS/cocoapods/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>如何更新React Native</title>
    <link href="http://superkk.top/2016/04/12/%E5%A6%82%E4%BD%95%E6%9B%B4%E6%96%B0React-Native/"/>
    <id>http://superkk.top/2016/04/12/如何更新React-Native/</id>
    <published>2016-04-12T07:32:04.000Z</published>
    <updated>2019-08-29T09:07:04.744Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最新的React Native已经更新到了0.33.0，如何更新自己已经搭建好的React Native开发环境呢，我按照以下步骤完成了更新，现记录下来，供有需要的人参考。</p></blockquote><h2 id="1-查看-react-native-的最新版本。"><a href="#1-查看-react-native-的最新版本。" class="headerlink" title="1.查看 react native 的最新版本。"></a>1.查看 react native 的最新版本。</h2><p>进入项目根目录，命令行执行<br><code>npm info react-native</code></p><p>查看当前版本<code>react-native --version</code></p><h2 id="2-在项目目录下修改package-json文件，将下列代码中的-react-native-改为最新版本"><a href="#2-在项目目录下修改package-json文件，将下列代码中的-react-native-改为最新版本" class="headerlink" title="2.在项目目录下修改package.json文件，将下列代码中的 react-native 改为最新版本"></a>2.在项目目录下修改<code>package.json</code>文件，将下列代码中的 react-native 改为最新版本</h2><pre><code>  &quot;dependencies&quot;: {      &quot;react&quot;: &quot;^0.14.8&quot;,      &quot;react-native&quot;: &quot;^0.33.0&quot;}</code></pre><h2 id="3-命令行执行"><a href="#3-命令行执行" class="headerlink" title="3. 命令行执行"></a>3. 命令行执行</h2><p><code>npm install --save react-native@0.33.0</code><br>如果升级后出现类似于<br><a href="mailto:`react-native@0.33.0" target="_blank" rel="noopener">`react-native@0.33.0</a> requires a peer of react@~15.3.1 but none was installed.`</p><p>执行<br><code>npm install --save react@~15.3.1</code></p><h2 id="4-运行程序"><a href="#4-运行程序" class="headerlink" title="4. 运行程序"></a>4. 运行程序</h2><p>如果更新后执行react-native run-android不能正确运行，而是出现类似：<br><code>Could not find com.facebook.react:react-native:0.23.0.</code><br>错误，或者在Android Studio中直接运行app时报错：<br><code>Android Studio failed to resolve com.facebook.react:react-native:0.23.0</code><br>那么可以按照下列命令修复，首先在命令行中执行：<br><code>npm i</code><br>执行完毕且不报错后，执行下面的命令，<strong>注意，在执行命令之后，某些文件可能会产生冲突，请确保你的本地文件记录可以恢复</strong>（在Android Studio中可以查看历史记录来恢复文件）<br><code>react-native upgrade</code><br>执行上面的命令可能会提示你是否覆盖文件。在解决冲突之后重新运行App即可。</p><h2 id="如果还有问题，可以更新一下npm和Node-js再试"><a href="#如果还有问题，可以更新一下npm和Node-js再试" class="headerlink" title="如果还有问题，可以更新一下npm和Node.js再试"></a>如果还有问题，可以更新一下npm和Node.js再试</h2><ul><li>如何更新npm<br><code>npm install -g npm</code></li><li>如何更新Node.js<br><code>npm update node.js</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最新的React Native已经更新到了0.33.0，如何更新自己已经搭建好的React Native开发环境呢，我按照以下步骤完成了更新，现记录下来，供有需要的人参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-查看-react-
      
    
    </summary>
    
      <category term="大前端" scheme="http://superkk.top/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React-Native" scheme="http://superkk.top/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/React-Native/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>消除编译器警告</title>
    <link href="http://superkk.top/2016/01/09/%E6%B6%88%E9%99%A4%E7%BC%96%E8%AF%91%E5%99%A8%E8%AD%A6%E5%91%8A/"/>
    <id>http://superkk.top/2016/01/09/消除编译器警告/</id>
    <published>2016-01-09T09:54:41.000Z</published>
    <updated>2019-08-29T09:07:04.732Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="关闭-deprecated-declarations-警告"><a href="#关闭-deprecated-declarations-警告" class="headerlink" title="关闭 deprecated-declarations 警告."></a>关闭 <code>deprecated-declarations</code> 警告.</h1><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程:"></a>基本流程:</h2><ol><li>push 当前警告入栈</li><li>忽略我们要消除的警告</li><li>执行会产生警告的代码</li><li>pop 警告出栈——恢复之前的状态<br><code>`</code>Objective-C<br>#pragma clang diagnostic push<br>#pragma clang diagnostic ignored “-Wdeprecated-declarations”<br>/<em><br>要屏蔽掉deprecated警告的代码</em>/<br>#pragma clang diagnostic pop</li></ol><pre><code># 关闭 XCode8 `Convenience initializer missing a self call to....` 警告 ```Objective-C#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Wobjc-designated-initializers&quot;/*要屏蔽掉deprecated警告的代码*/#pragma clang diagnostic pop</code></pre><h1 id="undeclared-selector警告"><a href="#undeclared-selector警告" class="headerlink" title="undeclared selector警告"></a><code>undeclared selector</code>警告</h1><pre><code class="Objective-C">#pragma clang diagnostic push#pragma clang diagnostic ignored&quot;-Wundeclared-selector&quot;//......#pragma clang diagnostic pop</code></pre><h1 id="Category-is-implementing-a-method-which-will-also-be-implemented-by-its-primary-class"><a href="#Category-is-implementing-a-method-which-will-also-be-implemented-by-its-primary-class" class="headerlink" title="Category is implementing a method which will also be implemented by its primary class"></a><code>Category is implementing a method which will also be implemented by its primary class</code></h1><p>当category重写类已有的方法时会出现此警告。</p><pre><code class="Objective-C">#pragma clang diagnostic push#pragma clang diagnostic ignored &quot;-Wobjc-protocol-method-implementation”//.....#pragma clang diagnostic pop</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;关闭-deprecated-declarations-警告&quot;&gt;&lt;a href=&quot;#关闭-deprecated-declarations-警告&quot; class=&quot;headerlink&quot; title=&quot;关闭 deprecated-declara
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS编译ffmpeg</title>
    <link href="http://superkk.top/2015/11/06/iOS%E7%BC%96%E8%AF%91ffmpeg/"/>
    <id>http://superkk.top/2015/11/06/iOS编译ffmpeg/</id>
    <published>2015-11-06T02:59:45.000Z</published>
    <updated>2019-08-29T09:07:04.714Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="iOS编译ffmpeg"><a href="#iOS编译ffmpeg" class="headerlink" title="iOS编译ffmpeg"></a>iOS编译ffmpeg</h1><p>参考<a href="http://www.jianshu.com/p/08107176d5bb" target="_blank" rel="noopener">http://www.jianshu.com/p/08107176d5bb</a></p><h2 id="1）-下载”一键编译”脚本"><a href="#1）-下载”一键编译”脚本" class="headerlink" title="1） 下载”一键编译”脚本"></a>1） 下载”一键编译”脚本</h2><p><a href="https://github.com/kewlbear/FFmpeg-iOS-build-script" target="_blank" rel="noopener">https://github.com/kewlbear/FFmpeg-iOS-build-script</a></p><h2 id="2）编译能在iOS下使用的FFMPEG-library库"><a href="#2）编译能在iOS下使用的FFMPEG-library库" class="headerlink" title="2）编译能在iOS下使用的FFMPEG library库"></a>2）编译能在iOS下使用的FFMPEG library库</h2><p>进入脚本目录，执行<br><code>./build-ffmpeg.sh</code></p><h2 id="3）在xcode中引入FFMPEG-library库"><a href="#3）在xcode中引入FFMPEG-library库" class="headerlink" title="3）在xcode中引入FFMPEG library库"></a>3）在xcode中引入FFMPEG library库</h2><p>新建工程，把上面编译好的FFmpeg-iOS拖到xcode工程中</p><p>编译后的文件夹中<br><code>ffmpeg-2.5.3</code> 是源码<br><code>FFmpeg-iOS</code> 是编译出来的库，里面有我们需要的.a静态库，一共有7个</p><p>执行<code>lipo -info libavcodec.a</code>，查看.a包支持的架构，这几个包都支持了<code>armv7 armv7s i386 x86_64 arm64</code>这几个架构，这个脚本果真是业界良心啊～～～</p><h2 id="4）加入依赖库"><a href="#4）加入依赖库" class="headerlink" title="4）加入依赖库"></a>4）加入依赖库</h2><p><code>libz.tbd</code> <code>libbz2.tbd</code> <code>libiconv.tbd</code>等<br><img src="https://upload-images.jianshu.io/upload_images/1120923-bccdc2e6176cb125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="78559964.png"></p><h2 id="5）为TARGETS-添加-search-paths"><a href="#5）为TARGETS-添加-search-paths" class="headerlink" title="5）为TARGETS 添加 search paths"></a>5）为TARGETS 添加 search paths</h2><p>项目根目录用 <code>$(SRCROOT)</code> 表示</p><ul><li>添加 Header Search Paths<br><code>$(inherited)</code><br><code>$(SRCROOT)/FfmpegDemo/FFmpeg-iOS/lib</code><br><img src="https://upload-images.jianshu.io/upload_images/1120923-8ee9a3eeed2d3909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="72612549.png"></li></ul><ul><li>添加 Library Search Paths （系统可能已经添加）<br><code>$(inherited)</code><br>`$(SRCROOT)/FfmpegDemo/FFmpeg-iOS/include<br><img src="https://upload-images.jianshu.io/upload_images/1120923-5217e7cf6a5fd309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="72413903.png"></li></ul><blockquote><p>如果编译不过（如缺少文件）一般都是search paths路径没写对</p></blockquote><h2 id="5）修改某个-m文件为-mm"><a href="#5）修改某个-m文件为-mm" class="headerlink" title="5）修改某个.m文件为.mm"></a>5）修改某个.m文件为.mm</h2><p>注意，不能是引入FFmpeg库的文件，否则编译不过</p><h2 id="6）引入头文件"><a href="#6）引入头文件" class="headerlink" title="6）引入头文件"></a>6）引入头文件</h2><pre><code>#include &quot;avformat.h&quot;</code></pre><p>如果编译成功，说明 search patchs 设置成功</p><h2 id="7）添加代码"><a href="#7）添加代码" class="headerlink" title="7）添加代码"></a>7）添加代码</h2><pre><code>#include &quot;avutil.h&quot;av_register_all();// 获取 ffmpeg 版本号const char *version = av_version_info();NSLog(@&quot;version: %s&quot;, version);</code></pre><p>执行成功说明集成成功</p><h1 id="各个CPU构架支持的设备"><a href="#各个CPU构架支持的设备" class="headerlink" title="各个CPU构架支持的设备"></a>各个CPU构架支持的设备</h1><p><img src="https://upload-images.jianshu.io/upload_images/1120923-5a4d76d47a24e554.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="68265767.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;iOS编译ffmpeg&quot;&gt;&lt;a href=&quot;#iOS编译ffmpeg&quot; class=&quot;headerlink&quot; title=&quot;iOS编译ffmpeg&quot;&gt;&lt;/a&gt;iOS编译ffmpeg&lt;/h1&gt;&lt;p&gt;参考&lt;a href=&quot;http://www
      
    
    </summary>
    
      <category term="ffmpeg" scheme="http://superkk.top/categories/ffmpeg/"/>
    
    
  </entry>
  
  <entry>
    <title>KVO深入解析</title>
    <link href="http://superkk.top/2015/10/24/KVO%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90/"/>
    <id>http://superkk.top/2015/10/24/KVO深入解析/</id>
    <published>2015-10-24T09:18:51.000Z</published>
    <updated>2019-08-29T09:07:04.705Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="iOS-中监听某个值的改变有哪些方法？"><a href="#iOS-中监听某个值的改变有哪些方法？" class="headerlink" title="iOS 中监听某个值的改变有哪些方法？"></a>iOS 中监听某个值的改变有哪些方法？</h1><p>在一个复杂的，有状态的系统中，当一个对象的状态发生改变，如何通知系统，并对状态改变做出相应的行为是必需考虑的一个问题，在iOS中为这类问题提供了4种解决方法： </p><ol><li>NSNotifiactaion 和 NSNotificationCenter：通知中心 </li><li>Delegates：代理， </li><li><p>Callback：回调， </p></li><li><p>KVO（Key-Value Observing）：键值观察 </p></li></ol><p>Key-Value Observing (简写为KVO)：当指定的对象的属性被修改了，允许对象接受到通知的机制。每次指定的被观察对象的属性被修改的时候，KVO都会自动的去通知相应的观察者。</p><h1 id="KVO-是什么？"><a href="#KVO-是什么？" class="headerlink" title="KVO 是什么？"></a>KVO 是什么？</h1><blockquote><blockquote><p>Objective-C 中的键(key)-值(value)观察(KVO)并不是什么新鲜事物，它来源于设计模式中的观察者模式，其基本思想就是：<br>一个目标对象管理所有依赖于它的观察者对象，并在它自身的状态改变时主动通知观察者对象。这个主动通知通常是通过调用各观察者对象所提供的接口方法来实现的。观察者模式较完美地将目标对象与观察者对象解耦。</p></blockquote></blockquote><h1 id="KVO-的用法"><a href="#KVO-的用法" class="headerlink" title="KVO 的用法"></a>KVO 的用法</h1><ol><li>如果要监听“对象A”属性值的改变，先要为＂对象A＂的属性注册观察者（假设观察者为“对象B”）。<br><code>`</code>Objective-C</li></ol><ul><li>(void)addObserver:(NSObject <em> _Nonnull)anObserver<br>forKeyPath:(NSString </em> _Nonnull)keyPath<br>options:(NSKeyValueObservingOptions)options<br>context:(void * _Nullable)context<br><code>`</code><br><code>anObserver</code> : 观察者，注册 KVO 通知的对象. 其必须实现方法 observeValueForKeyPath:ofObject:change:context:.<br><code>keyPath</code> : 被观察的属性，其不能为nil.<br><code>options</code> : 表示要监听那些通知，一般为写 0<br><code>context</code> : 一些其他的需要传递给观察者的上下文信息，通常设置为 nil</li></ul><p><code>options</code> 解释如下：<br><code>NSKeyValueObservingOptionNew</code> : change 字典中包含 key 改变后的新值<br><code>NSKeyValueObservingOptionOld</code> : change 字典中包含 key 改变前的旧值<br><code>NSKeyValueObservingOptionInitial</code> : 在添加观察者的时候立即发送一个通知给观察者,并且是在注册观察者方法返回之前<br><code>NSKeyValueObservingOptionPrior</code> : 如果指定，则在每次修改属性时，会在修改通知被发送之前预先发送一条通知给观察者，这与-willChangeValueForKey:被触发的时间是相对应的。这样，在每次修改属性时，实际上是会发送两条通知。<br>２.　观察者“对象B”实现　<code>observeValueForKeyPath:ofObject:change:context:</code>.　方法<br>３.   “对象A”移除监听者　<code>- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath</code>;<br>另外注意：<code>keyPath</code> 即被观察的属性只能是 <code>NSString</code> 类型</p><ul><li>注意点：在哪个线程触发监听（修改了值），监听方法就会在哪个线程中执行</li></ul><h1 id="KVO-的实现原理"><a href="#KVO-的实现原理" class="headerlink" title="KVO 的实现原理"></a>KVO 的实现原理</h1><p>键值编码和键值观察是根据 isa-swizzling 技术来实现的，主要依据runtime的强大动态能力。<br>当某个类的对象第一次被观察时，系统就会在运行期动态地创建该类的一个派生类，在这个派生类中重写基类中任何被观察属性的 setter 方法。派生类在被重写的 setter 方法实现真正的通知机制。<br>同时派生类还重写了 class 方法以“欺骗”外部调用者它就是起初的那个类。然后系统将这个对象的 isa 指针指向这个新诞生的派生类，因此这个对象就成为该派生类的对象了，因而在该对象上对 setter 的调用就会调用重写的 setter，从而激活键值通知机制。此外，派生类还重写了 dealloc 方法来释放资源。</p><ol><li>重写新类的 class 方法<br>重写class方法是为了我们调用它的时候返回跟重写继承类之前同样的内容。<br><code>`</code>Objective-C<br>//打印如下内容：<br>NSLog(@”self-&gt;isa:%@”,self-&gt;isa);<br>NSLog(@”self class:%@”,[self class]);</li></ol><p>//在建立KVO监听前，打印结果为：<br>self-&gt;isa:Person<br>self class:Person</p><p>//在建立KVO监听之后，打印结果为：<br>self-&gt;isa:NSKVONotifying_Person</p><p>self class:Person</p><pre><code>2. 重写新类的 set 方法新类会重写对应的set方法，是为了在set方法中增加另外两个方法的调用：```Objective-C- (void)willChangeValueForKey:(NSString *)key</code></pre><pre><code class="Objective-C">- (void)didChangeValueForKey:(NSString *)key</code></pre><p>其中，<code>didChangeValueForKey</code>:方法负责调用：</p><pre><code class="Objective-C">- (void)observeValueForKeyPath:(NSString *)keyPathofObject:(id)objectchange:(NSDictionary *)changecontext:(void *)context</code></pre><p>如果没有 setter 方法，那么 -setValue:forKey 方法会直接调用：</p><pre><code class="Objective-C">- (void)willChangeValueForKey:(NSString *)key</code></pre><pre><code class="Objective-C">- (void)didChangeValueForKey:(NSString *)key</code></pre><p>如果在没有使用键值编码且没有使用适当命名的访问起方法的时候，我们只需要显示调用上述两个方法，同样可以使用KVO！</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><pre><code class="Objective-C">////  ViewController.m//  KVO test////  Created by KeSen on 15/9/1.//  Copyright (c) 2015年 KeSen. All rights reserved.//#import &quot;ViewController.h&quot;#import &quot;KSBaby.h&quot;@interface ViewController (){KSBaby *_baby;}@end@implementation ViewController- (void)viewDidLoad {[super viewDidLoad];// Do any additional setup after loading the view, typically from a nib.KSBaby *baby = [[KSBaby alloc] initWithHungry:@&quot;cryed&quot; thirst:NO];_baby = baby;// 一般如下使用// [_baby addObserver:self forKeyPath:@&quot;cry&quot; options: 0 context: nil];// 在 self 中监听 _baby 的 cry 属性变化[_baby addObserver:self forKeyPath:@&quot;cry&quot; options: NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld| NSKeyValueObservingOptionInitial | NSKeyValueObservingOptionPrior context:@&quot;ssss&quot;];}- (void)dealloc {[_baby removeObserver:self forKeyPath:@&quot;cry&quot;];}- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {NSLog(@&quot;keyPath: %@\n change: %@\n context: %@\n&quot;, keyPath, change, context);}- (IBAction)click:(UIButton *)sender {_baby.cry = @&quot;crying&quot;;}@end</code></pre><pre><code class="Objective-C">////  ViewController.m//  KVO test////  Created by KeSen on 15/9/1.//  Copyright (c) 2015年 KeSen. All rights reserved.//#import &quot;ViewController.h&quot;#import &quot;KSBaby.h&quot;@interface ViewController (){KSBaby *_baby;}@end@implementation ViewController- (void)viewDidLoad {[super viewDidLoad];// Do any additional setup after loading the view, typically from a nib.KSBaby *baby = [[KSBaby alloc] initWithHungry:@&quot;cryed&quot; thirst:NO];_baby = baby;// 一般如下使用// [_baby addObserver:self forKeyPath:@&quot;cry&quot; options: 0 context: nil];// 在 self 中监听 _baby 的 cry 属性变化[_baby addObserver:self forKeyPath:@&quot;cry&quot; options: NSKeyValueObservingOptionNew | NSKeyValueObservingOptionOld| NSKeyValueObservingOptionInitial | NSKeyValueObservingOptionPrior context:@&quot;ssss&quot;];}- (void)dealloc {[_baby removeObserver:self forKeyPath:@&quot;cry&quot;];}- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {NSLog(@&quot;keyPath: %@\n change: %@\n context: %@\n&quot;, keyPath, change, context);}- (IBAction)click:(UIButton *)sender {_baby.cry = @&quot;crying&quot;;}@end</code></pre><p>那么：程序启动时输出：<br><img src="https://upload-images.jianshu.io/upload_images/1120923-cce04359a1bbfaad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><br></p><p>点击按钮后输出：<br><img src="https://upload-images.jianshu.io/upload_images/1120923-5ded44b80985ff8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6aeaf4e75e531bd372f4a322860cbf07.png"></p><h1 id="KVO与多线程"><a href="#KVO与多线程" class="headerlink" title="KVO与多线程"></a>KVO与多线程</h1><p>注意点：在哪个线程触发监听（修改了值），监听方法就会在哪个线程中执行</p><pre><code class="Objective-C">////  ViewController.m//  KVO test////  Created by KeSen on 15/9/1.//  Copyright (c) 2015年 KeSen. All rights reserved.//#import &quot;ViewController.h&quot;#import &quot;KSBaby.h&quot;#import &quot;FBKVOController.h&quot;@interface ViewController (){KSBaby *_baby;FBKVOController *_observer;}@end@implementation ViewController- (void)viewDidLoad {[super viewDidLoad];// Do any additional setup after loading the view, typically from a nib.KSBaby *baby = [[KSBaby alloc] initWithHungry:@&quot;cryed&quot; thirst:NO];_baby = baby;// NSKeyValueObservingOptionNew : change 字典中包含 key 改变后的新值// NSKeyValueObservingOptionOld : change 字典中包含 key 改变前的旧值// NSKeyValueObservingOptionInitial : 在添加观察者的时候立即发送一个通知给观察者,并且是在注册观察者方法返回之前// NSKeyValueObservingOptionPrior : 如果指定，则在每次修改属性时，会在修改通知被发送之前预先发送一条通知给观察者，这与-willChangeValueForKey:被触发的时间是相对应的。这样，在每次修改属性时，实际上是会发送两条通知。// 1. 一般用法如下[_baby addObserver:self forKeyPath:@&quot;cry&quot; options: 0 context: nil];//    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{//        [_baby addObserver:self forKeyPath:@&quot;cry&quot; options: NSKeyValueObservingOptionNew context:@&quot;ssss&quot;];////    });// 2. 第三方库 FBKVOController 的用法_observer = [[FBKVOController alloc] initWithObserver:self];[_observer observe:_baby keyPath:@&quot;cry&quot; options:NSKeyValueObservingOptionNew block:^(id observer, id object, NSDictionary *change) {NSLog(@&quot;%@, %@&quot;, @&quot;FBKVOController&quot;, change[NSKeyValueChangeNewKey]);}];}- (void)dealloc {[_baby removeObserver:self forKeyPath:@&quot;cry&quot;];}- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {NSLog(@&quot;%@&quot;, [NSThread currentThread]);NSLog(@&quot;keyPath: %@\n change: %@\n context: %@\n&quot;, keyPath, change, context);}- (IBAction)click:(UIButton *)sender {//    _baby.cry = @&quot;crying&quot;;// 1. 注意点：在哪个线程触发监听（修改了值），监听方法就会在哪个线程中执行dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{_baby.cry = @&quot;cry again&quot;;});}@end</code></pre><p>KVO 监听 NSMutableArray 的内容变化</p><ol><li>将数组封装到一个对象中</li><li>给这个对象添加 KVO 监听</li><li>使用  [self.arrayObject mutableArrayValueForKey:@”array”] 获取数组对象，对数组对象今天添加删除操作，只有这样触发的数组才会触发 kvo<br><img src="https://upload-images.jianshu.io/upload_images/1120923-22f9b36418f98970.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="06f37246739a3b062139a12c5070e044.png"></li></ol><p>参考：<a href="http://www.cppblog.com/kesalin/archive/2012/11/17/kvo.html" target="_blank" rel="noopener">http://www.cppblog.com/kesalin/archive/2012/11/17/kvo.html</a><br><a href="http://ningandjiao.iteye.com/blog/2009729" target="_blank" rel="noopener">http://ningandjiao.iteye.com/blog/2009729</a><br><a href="http://www.bkjia.com/IOSjc/993206.html" target="_blank" rel="noopener">http://www.bkjia.com/IOSjc/993206.html</a><br><a href="http://blog.csdn.net/wzzvictory/article/details/9674431" target="_blank" rel="noopener">http://blog.csdn.net/wzzvictory/article/details/9674431</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;iOS-中监听某个值的改变有哪些方法？&quot;&gt;&lt;a href=&quot;#iOS-中监听某个值的改变有哪些方法？&quot; class=&quot;headerlink&quot; title=&quot;iOS 中监听某个值的改变有哪些方法？&quot;&gt;&lt;/a&gt;iOS 中监听某个值的改变有哪些
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo GitHub博客搭建</title>
    <link href="http://superkk.top/2015/09/09/Hexo-GitHub%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://superkk.top/2015/09/09/Hexo-GitHub博客搭建/</id>
    <published>2015-09-09T04:01:05.000Z</published>
    <updated>2019-08-29T09:07:27.804Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="相关网站"><a href="#相关网站" class="headerlink" title="相关网站"></a>相关网站</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li><p>1、安装<code>Node.js</code><br><a href="https://blog.csdn.net/u011619283/article/details/52368759" target="_blank" rel="noopener">https://blog.csdn.net/u011619283/article/details/52368759</a></p></li><li><p>2、安装hexo<br><code>npm install -g hexo-cli</code></p></li></ul><h1 id="本地站点搭建"><a href="#本地站点搭建" class="headerlink" title="本地站点搭建"></a>本地站点搭建</h1><ul><li><p>1、初始化 Hexo<br>进入自己创建的目录下</p><pre><code>hexo init</code></pre></li><li><p>2、生成静态页面</p><pre><code>hexo generate</code></pre></li><li><p>自动监视文件变化<br><code>hexo generate --watch</code></p></li><li><p>3、启动服务</p><pre><code>hexo server</code></pre></li><li><p>4、查看效果<br>打开浏览器，输入 <code>http://localhost:4000/</code></p></li></ul><h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><ul><li><p>1、创建仓库<br>仓库名称固定格式如下：<br><code>yourGitbubUsername.github.io</code><br>注意yourGitbubUsername必须与你的github用户名相同，否则无法部署</p></li><li><p>2、安装github部署器</p><pre><code>npm install hexo-deployer-git –save</code></pre></li><li><p>3、修改本地配置文件<code>_config.yml</code><br><code>`</code><br>deploy:<br>type: git<br>repo: <a href="https://github.com/action456789/action456789.github.io.git" target="_blank" rel="noopener">https://github.com/action456789/action456789.github.io.git</a><br>branch: master</p></li></ul><pre><code>- 4、部署</code></pre><p>hexo generate<br>hexo deploy</p><pre><code>或者</code></pre><p>hexo g -d</p><pre><code>- 5、测试部署成功以后，在浏览器中输入 http://action456789.github.io 即可在线浏览自己的博客啦# 绑定域名https://www.cnblogs.com/penglei-it/p/hexo_domain_name.html（亲测可行）&gt; 一定要创建CNAME文件，并且由于这种方式只支持单域名访问，CNAME文件中只有第一个域名会生效。# 修改主题- 直接去查找最流行的主题，github上有安装说明，这个是最靠谱的安装方法。- 安装完成之后：输入`hexo s --debug`进行测试</code></pre><p>hexo clean<br>hexo generate<br>hexo server (若是想本地预览和执行该命令预览)<br>hexo deploy</p><pre><code>## NexT主题官方文档http://theme-next.iissnan.com/getting-started.html# 添加`tag`</code></pre><p>hexo new page “tags”</p><pre><code># 博客的创建、修改与删除- 1、创建新博客</code></pre><p>hexo new “test_blog”</p><pre><code>- 删除博客删除博客文件后重新发布更新即可可能需要等几分钟才有效果- 2、发布更新</code></pre><p>hexo clean<br>hexo generate<br>hexo deploy</p><pre><code>- 3、一些快捷键</code></pre><p>hexo g == hexo generate<br>hexo d == hexo deploy<br>hexo s == hexo server<br>hexo n == hexo new<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;相关网站&quot;&gt;&lt;a href=&quot;#相关网站&quot; class=&quot;headerlink&quot; title=&quot;相关网站&quot;&gt;&lt;/a&gt;相关网站&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="工具" scheme="http://superkk.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS中的时间</title>
    <link href="http://superkk.top/2015/08/13/iOS%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/"/>
    <id>http://superkk.top/2015/08/13/iOS中的时间/</id>
    <published>2015-08-13T14:10:18.000Z</published>
    <updated>2019-08-29T09:07:04.731Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="设备开机后的时间"><a href="#设备开机后的时间" class="headerlink" title="设备开机后的时间"></a>设备开机后的时间</h1><ul><li><code>CACurrentMediaTime()</code></li></ul><p>设备从开机时起到现在的时间，设备重启会重置，单位为秒</p><ul><li><code>[[NSProcessInfo processInfo] systemUptime]</code> </li></ul><p>与<code>CACurrentMediaTime()</code>等价</p><h1 id="相对某个参考系的时间"><a href="#相对某个参考系的时间" class="headerlink" title="相对某个参考系的时间"></a>相对某个参考系的时间</h1><ul><li><code>Date().timeIntervalSince1970</code> </li></ul><p>1970年1月1日凌晨为参考系，到现在的时间，一般用于表示时间戳</p><p><br></p><ul><li><code>Date().timeIntervalSinceReferenceDate</code></li></ul><p>世界时间（UTC）2001年1月1日凌晨到现在经过的时间，单位为秒</p><p><br></p><ul><li><code>CFAbsoluteTimeGetCurrent()</code></li></ul><p>与<code>Date().timeIntervalSinceReferenceDate</code>等价</p><p><br></p><blockquote><p>当用户手动改变了设备上的系统时间后，基于系统时钟的上述方法返回的结果也会一同改变</p></blockquote><pre><code class="Swift">print(CACurrentMediaTime()) // 设备刚重启print(Date().timeIntervalSince1970)print(Date().timeIntervalSinceReferenceDate)print(CFAbsoluteTimeGetCurrent())</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/1120923-1bb36e607297d7c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="必要时，从服务器上获取时间"><a href="#必要时，从服务器上获取时间" class="headerlink" title="必要时，从服务器上获取时间"></a>必要时，从服务器上获取时间</h1><p>如果App本身对获取的时间精度要求很高，还是直接通过网络从服务器获取时间戳会比较保险。</p><p>当网络可用时，直接从服务器获取；</p><p>网络不可用时，且设备没有被重启过，可以根据上一次获取服务器时间戳的时刻到此时的时间差来推算出正确的时间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;设备开机后的时间&quot;&gt;&lt;a href=&quot;#设备开机后的时间&quot; class=&quot;headerlink&quot; title=&quot;设备开机后的时间&quot;&gt;&lt;/a&gt;设备开机后的时间&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CACurrentMediaTime()&lt;
      
    
    </summary>
    
      <category term="iOS" scheme="http://superkk.top/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://superkk.top/tags/iOS/"/>
    
  </entry>
  
</feed>
